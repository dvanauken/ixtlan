    |   +-- ixt-form
    |   |   +-- ixt-binary
    |   |   |   --- ixt-binary.editor.ts: import { Component, forwardRef, Input, OnInit } from '@angular/core'; import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms'; interface BinaryConfig { trueLabel?: string; falseLabel?: string; trueValue?: any; falseValue?: any; } const DEFAULT_CONFIG: BinaryConfig = { trueLabel: 'Yes', falseLabel: 'No', trueValue: true, falseValue: false }; const COMMON_PRESETS = { BOOLEAN: { trueLabel: 'True', falseLabel: 'False', trueValue: true, falseValue: false }, NUMERIC: { trueLabel: '1', falseLabel: '0', trueValue: 1, falseValue: 0 }, YES_NO: { trueLabel: 'Yes', falseLabel: 'No', trueValue: 'Y', falseValue: 'N' }, ON_OFF: { trueLabel: 'On', falseLabel: 'Off', trueValue: 'ON', falseValue: 'OFF' } }; @Component({ selector: 'ixt-binary-editor', templateUrl: './ixt-binary.editor.html', styleUrls: ['./ixt-binary.editor.scss'], providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IxtBinaryEditor), multi: true }] }) export class IxtBinaryEditor implements ControlValueAccessor, OnInit { @Input() config: BinaryConfig = DEFAULT_CONFIG; @Input() preset?: keyof typeof COMMON_PRESETS; @Input() useRadio: boolean = false; @Input() id: string = `binary-${Math.random().toString(36).substr(2, 9)}`; private currentValue: any; disabled: boolean = false; isTrue: boolean = false; private onChange: (value: any) => void = () => {}; private onTouched: () => void = () => {}; ngOnInit() { if (this.preset) { this.config = { ...this.config, ...COMMON_PRESETS[this.preset] }; } } onCheckboxChange(event: Event): void { const checkbox = event.target as HTMLInputElement; this.setValue(checkbox.checked); } setValue(checked: boolean): void { this.isTrue = checked; this.currentValue = checked ? this.config.trueValue : this.config.falseValue; this.onChange(this.currentValue); } writeValue(value: any): void { this.currentValue = value; this.isTrue = value === this.config.trueValue; } registerOnChange(fn: (value: any) => void): void { this.onChange = fn; } registerOnTouched(fn: () => void): void { this.onTouched = fn; } setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; } }
    |   |   |   --- ixt-binary.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtBinaryEditor } from './ixt-binary.editor'; @NgModule({ declarations: [ IxtBinaryEditor ], imports: [ CommonModule, FormsModule ], exports: [ IxtBinaryEditor ] }) export class IxtBinaryModule { }
    |   |   +-- ixt-date
    |   |   |   --- ixt-date.editor.ts: // ixt-date-editor.component.ts import { Component, forwardRef, Input, OnInit } from '@angular/core'; import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms'; interface DateConfig { format?: string; showTime?: boolean; showDate?: boolean; minDate?: Date; maxDate?: Date; allowManualInput?: boolean; } interface TimeConfig { use24Hour?: boolean; showSeconds?: boolean; secondsStep?: number; minutesStep?: number; } const DEFAULT_DATE_CONFIG: DateConfig = { format: 'MM-DD-YYYY', showTime: false, showDate: true, allowManualInput: true }; const DEFAULT_TIME_CONFIG: TimeConfig = { use24Hour: false, showSeconds: false, secondsStep: 1, minutesStep: 1 }; @Component({ selector: 'ixt-date-editor', templateUrl: './ixt-date-editor.component.html', styleUrls: ['./ixt-date-editor.component.scss'], providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IxtDateEditorComponent), multi: true }] }) export class IxtDateEditorComponent implements ControlValueAccessor, OnInit { @Input() dateConfig: DateConfig = DEFAULT_DATE_CONFIG; @Input() timeConfig: TimeConfig = DEFAULT_TIME_CONFIG; @Input() id: string = `date-${Math.random().toString(36).substr(2, 9)}`; currentDate: Date | null = null; showDatePicker = false; isAM = true; disabled = false; hours = '12'; minutes = '00'; seconds = '00'; private onChange: (value: any) => void = () => {}; private onTouched: () => void = () => {}; ngOnInit() { this.initializeTime(); } private initializeTime() { if (this.currentDate) { const hours = this.currentDate.getHours(); this.isAM = hours < 12; this.hours = this.timeConfig.use24Hour ? hours.toString().padStart(2, '0') : (hours % 12 || 12).toString().padStart(2, '0'); this.minutes = this.currentDate.getMinutes().toString().padStart(2, '0'); this.seconds = this.currentDate.getSeconds().toString().padStart(2, '0'); } } onDateChange(event: Event): void { const input = event.target as HTMLInputElement; const newDate = new Date(input.value); if (isNaN(newDate.getTime())) return; if (this.dateConfig.minDate && newDate < this.dateConfig.minDate) return; if (this.dateConfig.maxDate && newDate > this.dateConfig.maxDate) return; this.setDate(newDate); } onTimeChange(): void { if (!this.currentDate) this.currentDate = new Date(); let hours = parseInt(this.hours); if (!this.timeConfig.use24Hour) { hours = hours % 12; if (!this.isAM) hours += 12; } this.currentDate.setHours(hours); this.currentDate.setMinutes(parseInt(this.minutes)); if (this.timeConfig.showSeconds) { this.currentDate.setSeconds(parseInt(this.seconds)); } this.emitChange(); } toggleAmPm(): void { this.isAM = !this.isAM; this.onTimeChange(); } setDate(date: Date): void { if (this.currentDate) { date.setHours(this.currentDate.getHours()); date.setMinutes(this.currentDate.getMinutes()); date.setSeconds(this.currentDate.getSeconds()); } this.currentDate = date; this.emitChange(); } private emitChange(): void { this.onChange(this.currentDate); this.onTouched(); } writeValue(value: Date): void { this.currentDate = value; this.initializeTime(); } registerOnChange(fn: any): void { this.onChange = fn; } registerOnTouched(fn: any): void { this.onTouched = fn; } setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; } }
    |   |   |   --- ixt-date.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtDateEditor } from './ixt-date.editor'; @NgModule({ declarations: [ IxtDateEditor ], imports: [ CommonModule, FormsModule ], exports: [ IxtDateEditor ] }) export class IxtDateModule { }
    |   |   +-- ixt-input
    |   |   |   --- ixt-input.editor.ts: import { Component } from '@angular/core'; @Component({ selector: 'ixt-input-editor', templateUrl: './ixt-input.editor.html', styleUrls: ['./ixt-input.editor.scss'] }) export class IxtInputEditor { }
    |   |   |   --- ixt-input.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtInputEditor } from './ixt-input.editor'; @NgModule({ declarations: [ IxtInputEditor ], imports: [ CommonModule, FormsModule ], exports: [ IxtInputEditor ] }) export class IxtInputModule { }
    |   |   +-- ixt-radio
    |   |   |   --- ixt-radio.editor.ts: //ixt-radio-editor.component.ts import { Component, forwardRef, Input, OnInit } from '@angular/core'; import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms'; interface RadioOption { label: string; value: any; disabled?: boolean; } interface RadioConfig { direction: 'horizontal' | 'vertical'; useButtonStyle: boolean; } const DEFAULT_CONFIG: RadioConfig = { direction: 'horizontal', useButtonStyle: false }; @Component({ selector: 'ixt-radio-editor', templateUrl: './ixt-radio-editor.component.html', styleUrls: ['./ixt-radio-editor.component.scss'], providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IxtRadioEditor), multi: true }] }) export class IxtRadioEditor implements ControlValueAccessor { @Input() config: RadioConfig = DEFAULT_CONFIG; @Input() options: RadioOption[] = []; @Input() id: string = `radio-${Math.random().toString(36).substr(2, 9)}`; currentValue: any; disabled = false; private onChange: (value: any) => void = () => {}; private onTouched: () => void = () => {}; onSelect(option: RadioOption): void { if (option.disabled || this.disabled) return; this.currentValue = option.value; this.onChange(this.currentValue); this.onTouched(); } writeValue(value: any): void { this.currentValue = value; } registerOnChange(fn: any): void { this.onChange = fn; } registerOnTouched(fn: any): void { this.onTouched = fn; } setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; } }
    |   |   |   --- ixt-radio.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtRadioEditor } from './ixt-radio.editor'; @NgModule({ declarations: [ IxtRadioEditor ], imports: [ CommonModule, FormsModule ], exports: [ IxtRadioEditor ] }) export class IxtInputModule { }
    |   |   +-- ixt-select
    |   |   |   --- ixt-select.editor.ts: // ixt-select-editor.component.ts import { Component, forwardRef, Input, OnInit } from '@angular/core'; import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms'; interface SelectOption { label: string; value: any; disabled?: boolean; } interface SelectConfig { placeholder?: string; multiple?: boolean; filterEnabled?: boolean; minFilterLength?: number; maxHeight?: string; } const DEFAULT_CONFIG: SelectConfig = { placeholder: 'Select...', multiple: false, filterEnabled: false, minFilterLength: 3, maxHeight: '300px' }; @Component({ selector: 'ixt-select-editor', templateUrl: './ixt-select-editor.component.html', styleUrls: ['./ixt-select-editor.component.scss'], providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IxtSelectEditor), multi: true }] }) export class IxtSelectEditor implements ControlValueAccessor, OnInit { @Input() config: SelectConfig = DEFAULT_CONFIG; @Input() options: SelectOption[] = []; @Input() id: string = `select-${Math.random().toString(36).substr(2, 9)}`; currentValue: any = ''; disabled: boolean = false; filterText: string = ''; showDropdown: boolean = false; filteredOptions: SelectOption[] = []; private onChange: (value: any) => void = () => {}; private onTouched: () => void = () => {}; ngOnInit() { this.filteredOptions = this.options; } onFilter(event: Event): void { const input = event.target as HTMLInputElement; this.filterText = input.value; if (!this.config.filterEnabled || this.filterText.length < (this.config.minFilterLength || 3)) { this.filteredOptions = this.options; return; } this.filteredOptions = this.options.filter(option => option.label.toLowerCase().includes(this.filterText.toLowerCase()) ); } onSelect(option: SelectOption): void { if (this.config.multiple) { const currentValues = Array.isArray(this.currentValue) ? this.currentValue : []; const index = currentValues.findIndex(v => v === option.value); if (index === -1) { this.setValue([...currentValues, option.value]); } else { currentValues.splice(index, 1); this.setValue([...currentValues]); } } else { this.setValue(option.value); this.showDropdown = false; } } isSelected(option: SelectOption): boolean { if (this.config.multiple) { return Array.isArray(this.currentValue) && this.currentValue.includes(option.value); } return this.currentValue === option.value; } toggleDropdown(): void { if (!this.disabled) { this.showDropdown = !this.showDropdown; } } setValue(value: any): void { this.currentValue = value; this.onChange(value); this.onTouched(); } writeValue(value: any): void { this.currentValue = value; } registerOnChange(fn: (value: any) => void): void { this.onChange = fn; } registerOnTouched(fn: () => void): void { this.onTouched = fn; } setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; } getSelectedLabel(): string { if (this.config.multiple && Array.isArray(this.currentValue)) { const selected = this.options.filter(opt => this.currentValue.includes(opt.value) ); return selected.map(opt => opt.label).join(', '); } const option = this.options.find(opt => opt.value === this.currentValue); return option ? option.label : ''; } }
    |   |   |   --- ixt-select.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtSelectEditor } from './ixt-select.editor'; @NgModule({ declarations: [ IxtSelectEditor ], imports: [ CommonModule, FormsModule ], exports: [ IxtSelectEditor ] }) export class IxtSelectModule { }
    |   |   +-- ixt-text
    |   |   |   --- ixt-text.editor.ts: import { Component, forwardRef, Input, OnInit } from '@angular/core'; import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms'; interface TextConfig { type?: 'text' | 'password' | 'email' | 'tel'; placeholder?: string; maxLength?: number; minLength?: number; pattern?: string; } const DEFAULT_CONFIG: TextConfig = { type: 'text', placeholder: '', maxLength: undefined, minLength: undefined, pattern: undefined }; const COMMON_PRESETS: Record<string, TextConfig> = { EMAIL: { type: 'email' as const, pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$' }, PHONE: { type: 'tel' as const, pattern: '^[0-9-+()\\s]*$', maxLength: 20 }, PASSWORD: { type: 'password' as const, minLength: 8 }, USERNAME: { type: 'text' as const, pattern: '^[a-zA-Z0-9_]*$', minLength: 3, maxLength: 20 } }; @Component({ selector: 'ixt-text-editor', templateUrl: './ixt-text-editor.component.html', styleUrls: ['./ixt-text-editor.component.scss'], providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IxtTextEditorComponent), multi: true }] }) export class IxtTextEditorComponent implements ControlValueAccessor, OnInit { @Input() config: TextConfig = DEFAULT_CONFIG; @Input() preset?: keyof typeof COMMON_PRESETS; @Input() readonly = false; @Input() id: string = `text-${Math.random().toString(36).substr(2, 9)}`; private currentValue: string = ''; disabled: boolean = false; private onChange: (value: any) => void = () => {}; private onTouched: () => void = () => {}; ngOnInit() { if (this.preset) { this.config = { ...this.config, ...COMMON_PRESETS[this.preset] }; } } onInput(event: Event): void { const input = event.target as HTMLInputElement; this.setValue(input.value); } setValue(value: string): void { this.currentValue = value; this.onChange(value); } writeValue(value: string): void { this.currentValue = value; } registerOnChange(fn: (value: any) => void): void { this.onChange = fn; } registerOnTouched(fn: () => void): void { this.onTouched = fn; } setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; } get value(): string { return this.currentValue; } }
    |   |   |   --- ixt-text.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtTextEditor } from './ixt-text.editor'; @NgModule({ declarations: [ IxtTextEditor ], imports: [ CommonModule, FormsModule ], exports: [ IxtTextEditor ] }) export class IxtTextModule { }
    |   |   +-- ixt-time
    |   |   |   --- ixt-time.editor.ts: import { Component } from '@angular/core'; @Component({ selector: 'ixt-time-editor', templateUrl: './ixt-time.editor.html', styleUrls: ['./ixt-time.editor.scss'] }) export class IxtTimeEditor { }
    |   |   |   --- ixt-time.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtTimeEditor } from './ixt-time.editor'; @NgModule({ declarations: [ IxtTimeEditor ], imports: [ CommonModule, FormsModule ], exports: [ IxtTimeEditor ] }) export class IxtTimeModule { }
    |   |   --- ixt-form.component.ts: import { Component } from '@angular/core'; @Component({ selector: 'ixt-form', templateUrl: './ixt-form.component.html', styleUrls: ['./ixt-form.component.scss'] }) export class IxtFormComponent { }
    |   |   --- ixt-form.index.ts: // Main Form Component & Module export { IxtFormComponent } from './ixt-form.component'; export { IxtFormModule } from './ixt-form.module'; // Text Editor export { IxtTextEditor } from './ixt-text/ixt-text.editor'; export { IxtTextModule } from './ixt-text/ixt-text.module'; // Input Editor export { IxtInputEditor } from './ixt-input/ixt-input.editor'; export { IxtInputModule } from './ixt-input/ixt-input.module'; // Select Editor export { IxtSelectEditor } from './ixt-select/ixt-select.editor'; export { IxtSelectModule } from './ixt-select/ixt-select.module'; // Date Editor export { IxtDateEditor } from './ixt-date/ixt-date.editor'; export { IxtDateModule } from './ixt-date/ixt-date.module'; // Time Editor export { IxtTimeEditor } from './ixt-time/ixt-time.editor'; export { IxtTimeModule } from './ixt-time/ixt-time.module'; // Binary Editor export { IxtBinaryEditor } from './ixt-binary/ixt-binary.editor'; export { IxtBinaryModule } from './ixt-binary/ixt-binary.module'; // Common Interfaces & Types export interface FormFieldConfig { type: 'text' | 'input' | 'select' | 'date' | 'time' | 'binary'; name: string; label?: string; placeholder?: string; required?: boolean; disabled?: boolean; validators?: any[]; defaultValue?: any; options?: Array<{value: any, label: string}>; // For select type dateFormat?: string; // For date type timeFormat?: string; // For time type [key: string]: any; // Allow additional custom configuration } export interface FormConfig { fields: FormFieldConfig[]; submitButton?: { text: string; variant?: string; }; cancelButton?: { text: string; variant?: string; }; layout?: 'vertical' | 'horizontal'; spacing?: 'compact' | 'normal' | 'loose'; } export enum FormControlType { TEXT = 'text', INPUT = 'input', SELECT = 'select', DATE = 'date', TIME = 'time', BINARY = 'binary' } export interface FormValidationError { field: string; message: string; type: string; } export interface FormSubmitEvent { values: { [key: string]: any }; isValid: boolean; errors?: FormValidationError[]; } // Event Types export type FormChangeEvent = { field: string; value: any; isValid: boolean; }; export type FormBlurEvent = { field: string; touched: boolean; }; // Validation Types export interface FormValidationRule { type: 'required' | 'pattern' | 'minLength' | 'maxLength' | 'min' | 'max' | 'custom'; message: string; value?: any; validator?: (value: any) => boolean; }
    |   |   --- ixt-form.module.ts: // ixt-form.module.ts import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { IxtFormComponent } from './ixt-form.component'; import { IxtBinaryModule } from './ixt-binary/ixt-binary.module'; import { IxtDateModule } from './ixt-date/ixt-date.module'; import { IxtInputModule } from './ixt-input/ixt-input.module'; import { IxtSelectModule } from './ixt-select/ixt-select.module'; import { IxtTextModule } from './ixt-text/ixt-text.module'; import { IxtTimeModule } from './ixt-time/ixt-time.module'; @NgModule({ declarations: [ IxtFormComponent ], imports: [ CommonModule, FormsModule, IxtBinaryModule, IxtDateModule, IxtInputModule, IxtSelectModule, IxtTextModule, IxtTimeModule ], exports: [ IxtFormComponent, IxtBinaryModule, IxtDateModule, IxtInputModule, IxtSelectModule, IxtTextModule, IxtTimeModule ] }) export class IxtFormModule { }
    --- public-api.ts: // public-api.ts //---------------------------------- Core Components & Services ---------------------------------- export { IxtTableModule, IxtTableComponent, AirportCodeEditorComponent, CoordinateEditorComponent, BinaryEditorComponent, TableEditor, ColumnConfigs, EditService, FilterService, SortService, SelectionService, PaginationService } from './components/ixt-table/ixt-table.index'; export { IxtDialogModule, IxtDialogComponent, IxtDialogService } from './components/ixt-dialog/ixt-dialog.index'; export { IxtTabsetModule, IxtTabComponent, IxtTabsetComponent, ITabContent, ITabsetConfig } from './components/ixt-tabset/ixt-tabset.index'; //------------------------------------ Basic UI Components ------------------------------------- export { IxtButtonModule, IxtButtonComponent, ButtonSize } from './components/ixt-button/ixt-button.index'; export { IxtPanelModule, IxtPanelComponent } from './components/ixt-panel/ixt-panel.index'; export { IxtMenuModule, IxtMenuComponent } from './components/ixt-menu/ixt-menu.index'; export { IxtTreeModule, IxtTreeComponent } from './components/ixt-tree/ixt-tree.index'; export { IxtAccordianModule, IxtAccordianComponent } from './components/ixt-accordian/ixt-accordian.index'; //--------------------------------- Canvas & View Components ---------------------------------- export { IxtCanvasModule, IxtCanvasComponent } from './components/ixt-canvas/ixt-canvas.index'; //------------------------------------ Form Components --------------------------------------- export { IxtFormModule, IxtInputModule, IxtSelectModule, IxtTextModule, IxtDateModule, IxtTimeModule, IxtBinaryModule, IxtFormComponent, IxtTextEditor, IxtInputEditor, IxtSelectEditor, IxtDateEditor, IxtTimeEditor, IxtBinaryEditor, FormFieldConfig } from './components/ixt-form/ixt-form.index'; //------------------------------------ Expression Builder Components --------------------------------------- export { IxtExpressionBuilderComponent, IxtExpressionBuilderModule } from './components/ixt-expression-builder/ixt-expression-builder.index'; //----------------------------------- Diagram Components ------------------------------------ export { IxtDiagramModule, IxtDiagramComponent } from './components/ixt-diagram/ixt-diagram.index'; export { IxtClazzDiagram, IxtClazzModule } from './components/ixt-diagram/types/clazz/ixt-clazz.index'; export { IxtDeploymentDiagram, IxtDeploymentModule } from './components/ixt-diagram/types/deployment/ixt-deployment.index'; export { IxtEbnfDiagram, IxtEbnfModule } from './components/ixt-diagram/types/EBNF/ixt-ebnf.index'; export { IxtFlowDiagram, IxtFlowModule } from './components/ixt-diagram/types/flow/ixt-flow.index'; export { IxtGanntDiagram, IxtGanntModule } from './components/ixt-diagram/types/gannt/gannt.index'; export { IxtNetworkDiagram, IxtNetworkModule } from './components/ixt-diagram/types/network/ixt-network.index'; export { IxtSankeyDiagram, IxtSankeyModule } from './components/ixt-diagram/types/sankey/ixt-sankey.index'; export { IxtWireframeDiagram, IxtWireframeModule } from './components/ixt-diagram/types/wireframe/ixt-wireframe.index'; //-------------------------------- Map & Layer Components ---------------------------------- export { IxtMapModule, IxtMapComponent, IxtLayerComponent, MapService, GeoProcessingService, LayerRenderService, LayerEventService, LayerStateService, MapErrorService, RouteProcessorService, MapDimensions, MapState, MapContainer, MapSelection, PathSelection, MapServiceState, LayerEventHandlers, LayerRenderOptions, LayerState, MapError, MapErrorCode, RouteProcessingConfig, GeoFeatureProperties, GeoProcessingOptions, } from './components/ixt-map/ixt-map.index'; //----------------------------- Utility & Layout Components -------------------------------- export { IxtSplitPaneComponent, IxtSplitPaneModule } from './components/ixt-splitpane/index'; export { IxtCalendarComponent, IxtCalendarModule } from './components/ixt-calendar/ixt-calendar.index'; //------------------------------------ Theme Exports -------------------------------------- export { ThemeVariant, ThemeColor, ThemeColors } from './components/theme/theme.types'; export { baseThemeColors, unitedThemeColors } from './components/theme/theme.colors'; export { TreeNode, TreeNodeData, TableTreeColumn, IxtTableTreeComponent, IxtTableTreeModule } from './components/ixt-table-tree/ixt-table-tree.index';
