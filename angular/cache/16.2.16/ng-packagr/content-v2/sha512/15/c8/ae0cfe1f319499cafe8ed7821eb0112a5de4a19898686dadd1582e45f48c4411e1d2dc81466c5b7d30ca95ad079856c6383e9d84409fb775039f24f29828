{"hash":"b7e08bd66a5917006c878059a7248d1876de69bf","fesm2022":[{"exports":["IxtTableComponent","IxtTableModule"],"facadeModuleId":"C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\dvanauken-ixtlan.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.component.mjs","C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.interfaces.mjs","C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.module.mjs","C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.index.mjs","C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\public-api.mjs","C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\dvanauken-ixtlan.mjs"],"name":"dvanauken-ixtlan","type":"chunk","dynamicImports":[],"fileName":"dvanauken-ixtlan.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["EventEmitter","inject","ChangeDetectorRef","*","Component","ViewChild","Input","Output","NgModule"],"@angular/common":["*","CommonModule"],"@angular/forms":["*","FormsModule"]},"imports":["@angular/core","@angular/common","@angular/forms"],"modules":{"C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.component.mjs":{"code":"class IxtTableComponent {\n    constructor() {\n        this.data = [];\n        this.selectionChange = new EventEmitter();\n        this.rowAdd = new EventEmitter();\n        this.rowEdit = new EventEmitter();\n        this.rowDelete = new EventEmitter();\n        this.sortChange = new EventEmitter();\n        this.filterChange = new EventEmitter();\n        this.cdr = inject(ChangeDetectorRef);\n        this.selectedRows = new Set();\n        this.lastClickedRowIndex = null;\n        this.editingRows = new Set();\n        this.showFilters = false;\n        this.paginatedData = [];\n        this.pagination = {\n            pageSize: 10,\n            currentPage: 1,\n            totalItems: 0,\n            pageSizeOptions: [10, 25, 50, 100, -1]\n        };\n    }\n    ngOnInit() {\n        this.initTable();\n    }\n    ngAfterViewInit() {\n        this.resizeObserver = new ResizeObserver(() => {\n            this.resizeTable();\n        });\n        this.resizeObserver.observe(this.tableContainer.nativeElement);\n    }\n    ngOnDestroy() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n    initTable() {\n        this.pagination.totalItems = this.data.length;\n        this.updatePaginatedData();\n    }\n    isRowSelected(row) {\n        return this.selectedRows.has(row);\n    }\n    isEditing(index) {\n        return this.editingRows.has(index);\n    }\n    formatCell(value, column) {\n        if (column.formatter) {\n            return column.formatter(value);\n        }\n        return value?.toString() ?? '';\n    }\n    onAddNewRow() {\n        const newRow = {};\n        this.data.unshift(newRow);\n        this.editingRows.add(0);\n        this.rowAdd.emit(newRow);\n        this.updatePaginatedData();\n    }\n    onFieldChange(event, field, row, index) {\n        const input = event.target;\n        const value = input.value;\n        const column = this.config.columns.find((col) => col.key === field);\n        if (column?.validator) {\n            const validationResult = column.validator(value);\n            if (typeof validationResult === 'string') {\n                alert(validationResult);\n                return;\n            }\n            if (!validationResult) {\n                return;\n            }\n        }\n        row[field] = value;\n    }\n    onRowClick(row, index, event) {\n        if (this.editingRows.size > 0)\n            return;\n        if (this.config.selectionMode === 'none')\n            return;\n        this.lastClickedRowIndex = index;\n        if (this.config.selectionMode === 'single') {\n            this.selectedRows.clear();\n            this.selectedRows.add(row);\n        }\n        else if (this.config.selectionMode === 'multiple') {\n            if (event.shiftKey && this.lastClickedRowIndex !== null) {\n                const start = Math.min(index, this.lastClickedRowIndex);\n                const end = Math.max(index, this.lastClickedRowIndex);\n                this.selectedRows = new Set(this.paginatedData.slice(start, end + 1));\n            }\n            else if (event.ctrlKey || event.metaKey) {\n                if (this.selectedRows.has(row)) {\n                    this.selectedRows.delete(row);\n                }\n                else {\n                    this.selectedRows.add(row);\n                }\n            }\n            else {\n                this.selectedRows.clear();\n                this.selectedRows.add(row);\n            }\n        }\n        this.selectionChange.emit(Array.from(this.selectedRows));\n    }\n    onEdit(row, index, event) {\n        event.stopPropagation();\n        row.originalData = { ...row };\n        this.editingRows.add(index);\n    }\n    onSave(row, index) {\n        const changes = {};\n        const original = row.originalData;\n        for (const key of Object.keys(row)) {\n            if (key !== 'originalData' && row[key] !== original[key]) {\n                changes[key] = row[key];\n            }\n        }\n        this.rowEdit.emit({ original, changes });\n        this.editingRows.delete(index);\n        delete row.originalData;\n    }\n    onCancel(row, index) {\n        const original = row.originalData;\n        Object.assign(row, original);\n        this.editingRows.delete(index);\n        delete row.originalData;\n    }\n    onDelete(row, index, event) {\n        event.stopPropagation();\n        if (confirm('Are you sure you want to delete this row?')) {\n            this.data = this.data.filter((_, i) => i !== index);\n            this.rowDelete.emit(row);\n            this.updatePaginatedData();\n        }\n    }\n    onSaveAll() {\n        for (const index of Array.from(this.editingRows)) {\n            const row = this.paginatedData[index];\n            this.onSave(row, index);\n        }\n    }\n    onSort(column) {\n        this.sortChange.emit({\n            column: column.key,\n            direction: 'asc' // Toggle this based on current state\n        });\n    }\n    onFilter(event, column) {\n        const input = event.target;\n        this.filterChange.emit({ column: column.key, value: input.value });\n    }\n    updatePaginatedData() {\n        if (this.pagination.pageSize === -1) {\n            this.paginatedData = [...this.data];\n            return;\n        }\n        const startIndex = (this.pagination.currentPage - 1) * this.pagination.pageSize;\n        const endIndex = startIndex + this.pagination.pageSize;\n        this.paginatedData = this.data.slice(startIndex, endIndex);\n    }\n    get totalPages() {\n        if (this.pagination.pageSize === -1)\n            return 1;\n        return Math.ceil(this.pagination.totalItems / this.pagination.pageSize);\n    }\n    get visiblePages() {\n        const totalPages = this.totalPages;\n        const current = this.pagination.currentPage;\n        const pages = [];\n        if (totalPages <= 7) {\n            for (let i = 1; i <= totalPages; i++)\n                pages.push(i);\n        }\n        else {\n            pages.push(1);\n            if (current > 3)\n                pages.push(-1);\n            for (let i = Math.max(2, current - 1); i <= Math.min(totalPages - 1, current + 1); i++) {\n                pages.push(i);\n            }\n            if (current < totalPages - 2)\n                pages.push(-1);\n            pages.push(totalPages);\n        }\n        return pages;\n    }\n    onPageSizeChange(event) {\n        const select = event.target;\n        const newSize = parseInt(select.value, 10);\n        this.pagination.pageSize = newSize;\n        this.pagination.currentPage = 1;\n        this.updatePaginatedData();\n    }\n    onPageChange(page) {\n        if (page < 1 || page > this.totalPages)\n            return;\n        this.pagination.currentPage = page;\n        this.updatePaginatedData();\n    }\n    goToFirstPage() { this.onPageChange(1); }\n    goToLastPage() { this.onPageChange(this.totalPages); }\n    goToPreviousPage() { this.onPageChange(this.pagination.currentPage - 1); }\n    goToNextPage() { this.onPageChange(this.pagination.currentPage + 1); }\n    resizeTable() {\n        if (this.tableContainer) {\n            const width = this.tableContainer.nativeElement.offsetWidth;\n            const height = this.tableContainer.nativeElement.offsetHeight;\n        }\n    }\n    toggleFilters(event) {\n        if (event) {\n            event.stopPropagation();\n        }\n        this.showFilters = !this.showFilters;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.12\", type: IxtTableComponent, selector: \"ixt-table\", inputs: { data: \"data\", config: \"config\" }, outputs: { selectionChange: \"selectionChange\", rowAdd: \"rowAdd\", rowEdit: \"rowEdit\", rowDelete: \"rowDelete\", sortChange: \"sortChange\", filterChange: \"filterChange\" }, viewQueries: [{ propertyName: \"tableContainer\", first: true, predicate: [\"tableContainer\"], descendants: true, static: true }], ngImport: i0, template: \"<div class=\\\"table-container\\\" #tableContainer>\\r\\n  <!-- Toolbar -->\\r\\n  <div class=\\\"toolbar\\\">\\r\\n    <button *ngIf=\\\"config.allowAdd\\\" (click)=\\\"onAddNewRow()\\\">Add New</button>\\r\\n    <button *ngIf=\\\"editingRows.size > 0\\\" (click)=\\\"onSaveAll()\\\">Save All</button>\\r\\n    <button (click)=\\\"toggleFilters($event)\\\">\\r\\n      {{ showFilters ? 'Hide Filters' : 'Show Filters' }}\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <!-- Table -->\\r\\n  <table>\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          {{col.header}}\\r\\n          <button *ngIf=\\\"col.sortable\\\" (click)=\\\"onSort(col)\\\">Sort</button>\\r\\n        </th>\\r\\n        <th *ngIf=\\\"config.allowEdit || config.allowDelete\\\">Actions</th>\\r\\n      </tr>\\r\\n      <tr *ngIf=\\\"showFilters\\\">\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          <input *ngIf=\\\"col.filterable\\\" \\r\\n                 [placeholder]=\\\"'Filter ' + col.header\\\"\\r\\n                 (input)=\\\"onFilter($event, col)\\\">\\r\\n        </th>\\r\\n        <th></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let row of paginatedData; let i = index\\\"\\r\\n          [class.selected]=\\\"isRowSelected(row)\\\"\\r\\n          (click)=\\\"onRowClick(row, i, $event)\\\">\\r\\n        <td *ngFor=\\\"let col of config.columns\\\">\\r\\n          <ng-container *ngIf=\\\"!isEditing(i); else editCell\\\">\\r\\n            {{ formatCell(row[col.key], col) }}\\r\\n          </ng-container>\\r\\n          <ng-template #editCell>\\r\\n            <input [value]=\\\"row[col.key]\\\"\\r\\n                   (input)=\\\"onFieldChange($event, col.key, row, i)\\\">\\r\\n          </ng-template>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"config.allowEdit || config.allowDelete\\\">\\r\\n          <button *ngIf=\\\"config.allowEdit && !isEditing(i)\\\" \\r\\n                  (click)=\\\"onEdit(row, i, $event)\\\">Edit</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onSave(row, i)\\\">Save</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onCancel(row, i)\\\">Cancel</button>\\r\\n          <button *ngIf=\\\"config.allowDelete\\\" \\r\\n                  (click)=\\\"onDelete(row, i, $event)\\\">Delete</button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n\\r\\n  <!-- Pagination -->\\r\\n  <div class=\\\"pagination\\\">\\r\\n    <select (change)=\\\"onPageSizeChange($event)\\\">\\r\\n      <option *ngFor=\\\"let size of pagination.pageSizeOptions\\\" \\r\\n              [value]=\\\"size\\\">\\r\\n        {{size === -1 ? 'All' : size}}\\r\\n      </option>\\r\\n    </select>\\r\\n    \\r\\n    <button (click)=\\\"goToFirstPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">First</button>\\r\\n    <button (click)=\\\"goToPreviousPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">Previous</button>\\r\\n    \\r\\n    <span *ngFor=\\\"let page of visiblePages\\\">\\r\\n      <button *ngIf=\\\"page !== -1\\\"\\r\\n              [class.active]=\\\"page === pagination.currentPage\\\"\\r\\n              (click)=\\\"onPageChange(page)\\\">\\r\\n        {{page}}\\r\\n      </button>\\r\\n      <span *ngIf=\\\"page === -1\\\">...</span>\\r\\n    </span>\\r\\n    \\r\\n    <button (click)=\\\"goToNextPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Next</button>\\r\\n    <button (click)=\\\"goToLastPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Last</button>\\r\\n  </div>\\r\\n</div>\", styles: [\".table-container{display:flex;flex-direction:column;gap:1rem;padding:1rem;width:100%;height:100%;overflow:auto}.table-container .toolbar{display:flex;gap:.5rem;align-items:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .toolbar button{padding:.5rem 1rem;border:1px solid #ddd;border-radius:4px;background-color:#fff;cursor:pointer}.table-container .toolbar button:hover{background-color:#f0f0f0}.table-container .toolbar button:active{background-color:#e0e0e0}.table-container table{width:100%;border-collapse:collapse;background-color:red}.table-container table th,.table-container table td{padding:.75rem;border:1px solid #ddd;text-align:left}.table-container table th input,.table-container table td input{width:100%;padding:.25rem;border:1px solid #ddd;border-radius:2px}.table-container table th input:focus,.table-container table td input:focus{outline:none;border-color:#2196f3}.table-container table th{background-color:#f5f5f5;font-weight:600}.table-container table th button{margin-left:.5rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table th button:hover{background-color:#f0f0f0}.table-container table tr:hover{background-color:#f8f8f8}.table-container table tr.selected{background-color:#e3f2fd}.table-container table tr.selected:hover{background-color:#e1f0fb}.table-container table tbody tr td:last-child{white-space:nowrap}.table-container table tbody tr td:last-child button{margin:0 .25rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table tbody tr td:last-child button:hover{background-color:#f0f0f0}.table-container .pagination{display:flex;gap:.5rem;align-items:center;justify-content:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .pagination select{padding:.25rem;border:1px solid #ddd;border-radius:2px;background-color:#fff}.table-container .pagination select:focus{outline:none;border-color:#2196f3}.table-container .pagination button{padding:.25rem .75rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container .pagination button:hover:not([disabled]){background-color:#f0f0f0}.table-container .pagination button:active:not([disabled]){background-color:#e0e0e0}.table-container .pagination button[disabled]{opacity:.5;cursor:not-allowed}.table-container .pagination button.active{background-color:#2196f3;color:#fff;border-color:#2196f3}.table-container .pagination button.active:hover{background-color:#1976d2}.filter-row.ng-enter,.filter-row.ng-leave{transition:all .3s ease}.filter-row.ng-enter{opacity:0;transform:translateY(-20px)}.filter-row.ng-enter-active,.filter-row.ng-leave{opacity:1;transform:translateY(0)}.filter-row.ng-leave-active{opacity:0;transform:translateY(-20px)}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ixt-table', template: \"<div class=\\\"table-container\\\" #tableContainer>\\r\\n  <!-- Toolbar -->\\r\\n  <div class=\\\"toolbar\\\">\\r\\n    <button *ngIf=\\\"config.allowAdd\\\" (click)=\\\"onAddNewRow()\\\">Add New</button>\\r\\n    <button *ngIf=\\\"editingRows.size > 0\\\" (click)=\\\"onSaveAll()\\\">Save All</button>\\r\\n    <button (click)=\\\"toggleFilters($event)\\\">\\r\\n      {{ showFilters ? 'Hide Filters' : 'Show Filters' }}\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <!-- Table -->\\r\\n  <table>\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          {{col.header}}\\r\\n          <button *ngIf=\\\"col.sortable\\\" (click)=\\\"onSort(col)\\\">Sort</button>\\r\\n        </th>\\r\\n        <th *ngIf=\\\"config.allowEdit || config.allowDelete\\\">Actions</th>\\r\\n      </tr>\\r\\n      <tr *ngIf=\\\"showFilters\\\">\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          <input *ngIf=\\\"col.filterable\\\" \\r\\n                 [placeholder]=\\\"'Filter ' + col.header\\\"\\r\\n                 (input)=\\\"onFilter($event, col)\\\">\\r\\n        </th>\\r\\n        <th></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let row of paginatedData; let i = index\\\"\\r\\n          [class.selected]=\\\"isRowSelected(row)\\\"\\r\\n          (click)=\\\"onRowClick(row, i, $event)\\\">\\r\\n        <td *ngFor=\\\"let col of config.columns\\\">\\r\\n          <ng-container *ngIf=\\\"!isEditing(i); else editCell\\\">\\r\\n            {{ formatCell(row[col.key], col) }}\\r\\n          </ng-container>\\r\\n          <ng-template #editCell>\\r\\n            <input [value]=\\\"row[col.key]\\\"\\r\\n                   (input)=\\\"onFieldChange($event, col.key, row, i)\\\">\\r\\n          </ng-template>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"config.allowEdit || config.allowDelete\\\">\\r\\n          <button *ngIf=\\\"config.allowEdit && !isEditing(i)\\\" \\r\\n                  (click)=\\\"onEdit(row, i, $event)\\\">Edit</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onSave(row, i)\\\">Save</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onCancel(row, i)\\\">Cancel</button>\\r\\n          <button *ngIf=\\\"config.allowDelete\\\" \\r\\n                  (click)=\\\"onDelete(row, i, $event)\\\">Delete</button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n\\r\\n  <!-- Pagination -->\\r\\n  <div class=\\\"pagination\\\">\\r\\n    <select (change)=\\\"onPageSizeChange($event)\\\">\\r\\n      <option *ngFor=\\\"let size of pagination.pageSizeOptions\\\" \\r\\n              [value]=\\\"size\\\">\\r\\n        {{size === -1 ? 'All' : size}}\\r\\n      </option>\\r\\n    </select>\\r\\n    \\r\\n    <button (click)=\\\"goToFirstPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">First</button>\\r\\n    <button (click)=\\\"goToPreviousPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">Previous</button>\\r\\n    \\r\\n    <span *ngFor=\\\"let page of visiblePages\\\">\\r\\n      <button *ngIf=\\\"page !== -1\\\"\\r\\n              [class.active]=\\\"page === pagination.currentPage\\\"\\r\\n              (click)=\\\"onPageChange(page)\\\">\\r\\n        {{page}}\\r\\n      </button>\\r\\n      <span *ngIf=\\\"page === -1\\\">...</span>\\r\\n    </span>\\r\\n    \\r\\n    <button (click)=\\\"goToNextPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Next</button>\\r\\n    <button (click)=\\\"goToLastPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Last</button>\\r\\n  </div>\\r\\n</div>\", styles: [\".table-container{display:flex;flex-direction:column;gap:1rem;padding:1rem;width:100%;height:100%;overflow:auto}.table-container .toolbar{display:flex;gap:.5rem;align-items:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .toolbar button{padding:.5rem 1rem;border:1px solid #ddd;border-radius:4px;background-color:#fff;cursor:pointer}.table-container .toolbar button:hover{background-color:#f0f0f0}.table-container .toolbar button:active{background-color:#e0e0e0}.table-container table{width:100%;border-collapse:collapse;background-color:red}.table-container table th,.table-container table td{padding:.75rem;border:1px solid #ddd;text-align:left}.table-container table th input,.table-container table td input{width:100%;padding:.25rem;border:1px solid #ddd;border-radius:2px}.table-container table th input:focus,.table-container table td input:focus{outline:none;border-color:#2196f3}.table-container table th{background-color:#f5f5f5;font-weight:600}.table-container table th button{margin-left:.5rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table th button:hover{background-color:#f0f0f0}.table-container table tr:hover{background-color:#f8f8f8}.table-container table tr.selected{background-color:#e3f2fd}.table-container table tr.selected:hover{background-color:#e1f0fb}.table-container table tbody tr td:last-child{white-space:nowrap}.table-container table tbody tr td:last-child button{margin:0 .25rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table tbody tr td:last-child button:hover{background-color:#f0f0f0}.table-container .pagination{display:flex;gap:.5rem;align-items:center;justify-content:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .pagination select{padding:.25rem;border:1px solid #ddd;border-radius:2px;background-color:#fff}.table-container .pagination select:focus{outline:none;border-color:#2196f3}.table-container .pagination button{padding:.25rem .75rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container .pagination button:hover:not([disabled]){background-color:#f0f0f0}.table-container .pagination button:active:not([disabled]){background-color:#e0e0e0}.table-container .pagination button[disabled]{opacity:.5;cursor:not-allowed}.table-container .pagination button.active{background-color:#2196f3;color:#fff;border-color:#2196f3}.table-container .pagination button.active:hover{background-color:#1976d2}.filter-row.ng-enter,.filter-row.ng-leave{transition:all .3s ease}.filter-row.ng-enter{opacity:0;transform:translateY(-20px)}.filter-row.ng-enter-active,.filter-row.ng-leave{opacity:1;transform:translateY(0)}.filter-row.ng-leave-active{opacity:0;transform:translateY(-20px)}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { tableContainer: [{\n                type: ViewChild,\n                args: ['tableContainer', { static: true }]\n            }], data: [{\n                type: Input\n            }], config: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], rowAdd: [{\n                type: Output\n            }], rowEdit: [{\n                type: Output\n            }], rowDelete: [{\n                type: Output\n            }], sortChange: [{\n                type: Output\n            }], filterChange: [{\n                type: Output\n            }] } });","originalLength":49212,"removedExports":[],"renderedExports":["IxtTableComponent"],"renderedLength":21898},"C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.interfaces.mjs":{"code":"","originalLength":1237,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.module.mjs":{"code":"class IxtTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, declarations: [IxtTableComponent], imports: [CommonModule,\n            FormsModule], exports: [IxtTableComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, imports: [CommonModule,\n            FormsModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        IxtTableComponent\n                    ],\n                    imports: [\n                        CommonModule,\n                        FormsModule\n                    ],\n                    exports: [\n                        IxtTableComponent\n                    ]\n                }]\n        }] });","originalLength":2858,"removedExports":[],"renderedExports":["IxtTableModule"],"renderedLength":1164},"C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\components\\ixt-table\\ixt-table.index.mjs":{"code":"","originalLength":653,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\public-api.mjs":{"code":"","originalLength":740,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\data\\ixtlan\\dist\\ixtlan\\esm2022\\dvanauken-ixtlan.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":484,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, inject, ChangeDetectorRef, Component, ViewChild, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\n\nclass IxtTableComponent {\n    constructor() {\n        this.data = [];\n        this.selectionChange = new EventEmitter();\n        this.rowAdd = new EventEmitter();\n        this.rowEdit = new EventEmitter();\n        this.rowDelete = new EventEmitter();\n        this.sortChange = new EventEmitter();\n        this.filterChange = new EventEmitter();\n        this.cdr = inject(ChangeDetectorRef);\n        this.selectedRows = new Set();\n        this.lastClickedRowIndex = null;\n        this.editingRows = new Set();\n        this.showFilters = false;\n        this.paginatedData = [];\n        this.pagination = {\n            pageSize: 10,\n            currentPage: 1,\n            totalItems: 0,\n            pageSizeOptions: [10, 25, 50, 100, -1]\n        };\n    }\n    ngOnInit() {\n        this.initTable();\n    }\n    ngAfterViewInit() {\n        this.resizeObserver = new ResizeObserver(() => {\n            this.resizeTable();\n        });\n        this.resizeObserver.observe(this.tableContainer.nativeElement);\n    }\n    ngOnDestroy() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n    initTable() {\n        this.pagination.totalItems = this.data.length;\n        this.updatePaginatedData();\n    }\n    isRowSelected(row) {\n        return this.selectedRows.has(row);\n    }\n    isEditing(index) {\n        return this.editingRows.has(index);\n    }\n    formatCell(value, column) {\n        if (column.formatter) {\n            return column.formatter(value);\n        }\n        return value?.toString() ?? '';\n    }\n    onAddNewRow() {\n        const newRow = {};\n        this.data.unshift(newRow);\n        this.editingRows.add(0);\n        this.rowAdd.emit(newRow);\n        this.updatePaginatedData();\n    }\n    onFieldChange(event, field, row, index) {\n        const input = event.target;\n        const value = input.value;\n        const column = this.config.columns.find((col) => col.key === field);\n        if (column?.validator) {\n            const validationResult = column.validator(value);\n            if (typeof validationResult === 'string') {\n                alert(validationResult);\n                return;\n            }\n            if (!validationResult) {\n                return;\n            }\n        }\n        row[field] = value;\n    }\n    onRowClick(row, index, event) {\n        if (this.editingRows.size > 0)\n            return;\n        if (this.config.selectionMode === 'none')\n            return;\n        this.lastClickedRowIndex = index;\n        if (this.config.selectionMode === 'single') {\n            this.selectedRows.clear();\n            this.selectedRows.add(row);\n        }\n        else if (this.config.selectionMode === 'multiple') {\n            if (event.shiftKey && this.lastClickedRowIndex !== null) {\n                const start = Math.min(index, this.lastClickedRowIndex);\n                const end = Math.max(index, this.lastClickedRowIndex);\n                this.selectedRows = new Set(this.paginatedData.slice(start, end + 1));\n            }\n            else if (event.ctrlKey || event.metaKey) {\n                if (this.selectedRows.has(row)) {\n                    this.selectedRows.delete(row);\n                }\n                else {\n                    this.selectedRows.add(row);\n                }\n            }\n            else {\n                this.selectedRows.clear();\n                this.selectedRows.add(row);\n            }\n        }\n        this.selectionChange.emit(Array.from(this.selectedRows));\n    }\n    onEdit(row, index, event) {\n        event.stopPropagation();\n        row.originalData = { ...row };\n        this.editingRows.add(index);\n    }\n    onSave(row, index) {\n        const changes = {};\n        const original = row.originalData;\n        for (const key of Object.keys(row)) {\n            if (key !== 'originalData' && row[key] !== original[key]) {\n                changes[key] = row[key];\n            }\n        }\n        this.rowEdit.emit({ original, changes });\n        this.editingRows.delete(index);\n        delete row.originalData;\n    }\n    onCancel(row, index) {\n        const original = row.originalData;\n        Object.assign(row, original);\n        this.editingRows.delete(index);\n        delete row.originalData;\n    }\n    onDelete(row, index, event) {\n        event.stopPropagation();\n        if (confirm('Are you sure you want to delete this row?')) {\n            this.data = this.data.filter((_, i) => i !== index);\n            this.rowDelete.emit(row);\n            this.updatePaginatedData();\n        }\n    }\n    onSaveAll() {\n        for (const index of Array.from(this.editingRows)) {\n            const row = this.paginatedData[index];\n            this.onSave(row, index);\n        }\n    }\n    onSort(column) {\n        this.sortChange.emit({\n            column: column.key,\n            direction: 'asc' // Toggle this based on current state\n        });\n    }\n    onFilter(event, column) {\n        const input = event.target;\n        this.filterChange.emit({ column: column.key, value: input.value });\n    }\n    updatePaginatedData() {\n        if (this.pagination.pageSize === -1) {\n            this.paginatedData = [...this.data];\n            return;\n        }\n        const startIndex = (this.pagination.currentPage - 1) * this.pagination.pageSize;\n        const endIndex = startIndex + this.pagination.pageSize;\n        this.paginatedData = this.data.slice(startIndex, endIndex);\n    }\n    get totalPages() {\n        if (this.pagination.pageSize === -1)\n            return 1;\n        return Math.ceil(this.pagination.totalItems / this.pagination.pageSize);\n    }\n    get visiblePages() {\n        const totalPages = this.totalPages;\n        const current = this.pagination.currentPage;\n        const pages = [];\n        if (totalPages <= 7) {\n            for (let i = 1; i <= totalPages; i++)\n                pages.push(i);\n        }\n        else {\n            pages.push(1);\n            if (current > 3)\n                pages.push(-1);\n            for (let i = Math.max(2, current - 1); i <= Math.min(totalPages - 1, current + 1); i++) {\n                pages.push(i);\n            }\n            if (current < totalPages - 2)\n                pages.push(-1);\n            pages.push(totalPages);\n        }\n        return pages;\n    }\n    onPageSizeChange(event) {\n        const select = event.target;\n        const newSize = parseInt(select.value, 10);\n        this.pagination.pageSize = newSize;\n        this.pagination.currentPage = 1;\n        this.updatePaginatedData();\n    }\n    onPageChange(page) {\n        if (page < 1 || page > this.totalPages)\n            return;\n        this.pagination.currentPage = page;\n        this.updatePaginatedData();\n    }\n    goToFirstPage() { this.onPageChange(1); }\n    goToLastPage() { this.onPageChange(this.totalPages); }\n    goToPreviousPage() { this.onPageChange(this.pagination.currentPage - 1); }\n    goToNextPage() { this.onPageChange(this.pagination.currentPage + 1); }\n    resizeTable() {\n        if (this.tableContainer) {\n            const width = this.tableContainer.nativeElement.offsetWidth;\n            const height = this.tableContainer.nativeElement.offsetHeight;\n        }\n    }\n    toggleFilters(event) {\n        if (event) {\n            event.stopPropagation();\n        }\n        this.showFilters = !this.showFilters;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.12\", type: IxtTableComponent, selector: \"ixt-table\", inputs: { data: \"data\", config: \"config\" }, outputs: { selectionChange: \"selectionChange\", rowAdd: \"rowAdd\", rowEdit: \"rowEdit\", rowDelete: \"rowDelete\", sortChange: \"sortChange\", filterChange: \"filterChange\" }, viewQueries: [{ propertyName: \"tableContainer\", first: true, predicate: [\"tableContainer\"], descendants: true, static: true }], ngImport: i0, template: \"<div class=\\\"table-container\\\" #tableContainer>\\r\\n  <!-- Toolbar -->\\r\\n  <div class=\\\"toolbar\\\">\\r\\n    <button *ngIf=\\\"config.allowAdd\\\" (click)=\\\"onAddNewRow()\\\">Add New</button>\\r\\n    <button *ngIf=\\\"editingRows.size > 0\\\" (click)=\\\"onSaveAll()\\\">Save All</button>\\r\\n    <button (click)=\\\"toggleFilters($event)\\\">\\r\\n      {{ showFilters ? 'Hide Filters' : 'Show Filters' }}\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <!-- Table -->\\r\\n  <table>\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          {{col.header}}\\r\\n          <button *ngIf=\\\"col.sortable\\\" (click)=\\\"onSort(col)\\\">Sort</button>\\r\\n        </th>\\r\\n        <th *ngIf=\\\"config.allowEdit || config.allowDelete\\\">Actions</th>\\r\\n      </tr>\\r\\n      <tr *ngIf=\\\"showFilters\\\">\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          <input *ngIf=\\\"col.filterable\\\" \\r\\n                 [placeholder]=\\\"'Filter ' + col.header\\\"\\r\\n                 (input)=\\\"onFilter($event, col)\\\">\\r\\n        </th>\\r\\n        <th></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let row of paginatedData; let i = index\\\"\\r\\n          [class.selected]=\\\"isRowSelected(row)\\\"\\r\\n          (click)=\\\"onRowClick(row, i, $event)\\\">\\r\\n        <td *ngFor=\\\"let col of config.columns\\\">\\r\\n          <ng-container *ngIf=\\\"!isEditing(i); else editCell\\\">\\r\\n            {{ formatCell(row[col.key], col) }}\\r\\n          </ng-container>\\r\\n          <ng-template #editCell>\\r\\n            <input [value]=\\\"row[col.key]\\\"\\r\\n                   (input)=\\\"onFieldChange($event, col.key, row, i)\\\">\\r\\n          </ng-template>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"config.allowEdit || config.allowDelete\\\">\\r\\n          <button *ngIf=\\\"config.allowEdit && !isEditing(i)\\\" \\r\\n                  (click)=\\\"onEdit(row, i, $event)\\\">Edit</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onSave(row, i)\\\">Save</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onCancel(row, i)\\\">Cancel</button>\\r\\n          <button *ngIf=\\\"config.allowDelete\\\" \\r\\n                  (click)=\\\"onDelete(row, i, $event)\\\">Delete</button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n\\r\\n  <!-- Pagination -->\\r\\n  <div class=\\\"pagination\\\">\\r\\n    <select (change)=\\\"onPageSizeChange($event)\\\">\\r\\n      <option *ngFor=\\\"let size of pagination.pageSizeOptions\\\" \\r\\n              [value]=\\\"size\\\">\\r\\n        {{size === -1 ? 'All' : size}}\\r\\n      </option>\\r\\n    </select>\\r\\n    \\r\\n    <button (click)=\\\"goToFirstPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">First</button>\\r\\n    <button (click)=\\\"goToPreviousPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">Previous</button>\\r\\n    \\r\\n    <span *ngFor=\\\"let page of visiblePages\\\">\\r\\n      <button *ngIf=\\\"page !== -1\\\"\\r\\n              [class.active]=\\\"page === pagination.currentPage\\\"\\r\\n              (click)=\\\"onPageChange(page)\\\">\\r\\n        {{page}}\\r\\n      </button>\\r\\n      <span *ngIf=\\\"page === -1\\\">...</span>\\r\\n    </span>\\r\\n    \\r\\n    <button (click)=\\\"goToNextPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Next</button>\\r\\n    <button (click)=\\\"goToLastPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Last</button>\\r\\n  </div>\\r\\n</div>\", styles: [\".table-container{display:flex;flex-direction:column;gap:1rem;padding:1rem;width:100%;height:100%;overflow:auto}.table-container .toolbar{display:flex;gap:.5rem;align-items:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .toolbar button{padding:.5rem 1rem;border:1px solid #ddd;border-radius:4px;background-color:#fff;cursor:pointer}.table-container .toolbar button:hover{background-color:#f0f0f0}.table-container .toolbar button:active{background-color:#e0e0e0}.table-container table{width:100%;border-collapse:collapse;background-color:red}.table-container table th,.table-container table td{padding:.75rem;border:1px solid #ddd;text-align:left}.table-container table th input,.table-container table td input{width:100%;padding:.25rem;border:1px solid #ddd;border-radius:2px}.table-container table th input:focus,.table-container table td input:focus{outline:none;border-color:#2196f3}.table-container table th{background-color:#f5f5f5;font-weight:600}.table-container table th button{margin-left:.5rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table th button:hover{background-color:#f0f0f0}.table-container table tr:hover{background-color:#f8f8f8}.table-container table tr.selected{background-color:#e3f2fd}.table-container table tr.selected:hover{background-color:#e1f0fb}.table-container table tbody tr td:last-child{white-space:nowrap}.table-container table tbody tr td:last-child button{margin:0 .25rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table tbody tr td:last-child button:hover{background-color:#f0f0f0}.table-container .pagination{display:flex;gap:.5rem;align-items:center;justify-content:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .pagination select{padding:.25rem;border:1px solid #ddd;border-radius:2px;background-color:#fff}.table-container .pagination select:focus{outline:none;border-color:#2196f3}.table-container .pagination button{padding:.25rem .75rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container .pagination button:hover:not([disabled]){background-color:#f0f0f0}.table-container .pagination button:active:not([disabled]){background-color:#e0e0e0}.table-container .pagination button[disabled]{opacity:.5;cursor:not-allowed}.table-container .pagination button.active{background-color:#2196f3;color:#fff;border-color:#2196f3}.table-container .pagination button.active:hover{background-color:#1976d2}.filter-row.ng-enter,.filter-row.ng-leave{transition:all .3s ease}.filter-row.ng-enter{opacity:0;transform:translateY(-20px)}.filter-row.ng-enter-active,.filter-row.ng-leave{opacity:1;transform:translateY(0)}.filter-row.ng-leave-active{opacity:0;transform:translateY(-20px)}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ixt-table', template: \"<div class=\\\"table-container\\\" #tableContainer>\\r\\n  <!-- Toolbar -->\\r\\n  <div class=\\\"toolbar\\\">\\r\\n    <button *ngIf=\\\"config.allowAdd\\\" (click)=\\\"onAddNewRow()\\\">Add New</button>\\r\\n    <button *ngIf=\\\"editingRows.size > 0\\\" (click)=\\\"onSaveAll()\\\">Save All</button>\\r\\n    <button (click)=\\\"toggleFilters($event)\\\">\\r\\n      {{ showFilters ? 'Hide Filters' : 'Show Filters' }}\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <!-- Table -->\\r\\n  <table>\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          {{col.header}}\\r\\n          <button *ngIf=\\\"col.sortable\\\" (click)=\\\"onSort(col)\\\">Sort</button>\\r\\n        </th>\\r\\n        <th *ngIf=\\\"config.allowEdit || config.allowDelete\\\">Actions</th>\\r\\n      </tr>\\r\\n      <tr *ngIf=\\\"showFilters\\\">\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          <input *ngIf=\\\"col.filterable\\\" \\r\\n                 [placeholder]=\\\"'Filter ' + col.header\\\"\\r\\n                 (input)=\\\"onFilter($event, col)\\\">\\r\\n        </th>\\r\\n        <th></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let row of paginatedData; let i = index\\\"\\r\\n          [class.selected]=\\\"isRowSelected(row)\\\"\\r\\n          (click)=\\\"onRowClick(row, i, $event)\\\">\\r\\n        <td *ngFor=\\\"let col of config.columns\\\">\\r\\n          <ng-container *ngIf=\\\"!isEditing(i); else editCell\\\">\\r\\n            {{ formatCell(row[col.key], col) }}\\r\\n          </ng-container>\\r\\n          <ng-template #editCell>\\r\\n            <input [value]=\\\"row[col.key]\\\"\\r\\n                   (input)=\\\"onFieldChange($event, col.key, row, i)\\\">\\r\\n          </ng-template>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"config.allowEdit || config.allowDelete\\\">\\r\\n          <button *ngIf=\\\"config.allowEdit && !isEditing(i)\\\" \\r\\n                  (click)=\\\"onEdit(row, i, $event)\\\">Edit</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onSave(row, i)\\\">Save</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onCancel(row, i)\\\">Cancel</button>\\r\\n          <button *ngIf=\\\"config.allowDelete\\\" \\r\\n                  (click)=\\\"onDelete(row, i, $event)\\\">Delete</button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n\\r\\n  <!-- Pagination -->\\r\\n  <div class=\\\"pagination\\\">\\r\\n    <select (change)=\\\"onPageSizeChange($event)\\\">\\r\\n      <option *ngFor=\\\"let size of pagination.pageSizeOptions\\\" \\r\\n              [value]=\\\"size\\\">\\r\\n        {{size === -1 ? 'All' : size}}\\r\\n      </option>\\r\\n    </select>\\r\\n    \\r\\n    <button (click)=\\\"goToFirstPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">First</button>\\r\\n    <button (click)=\\\"goToPreviousPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">Previous</button>\\r\\n    \\r\\n    <span *ngFor=\\\"let page of visiblePages\\\">\\r\\n      <button *ngIf=\\\"page !== -1\\\"\\r\\n              [class.active]=\\\"page === pagination.currentPage\\\"\\r\\n              (click)=\\\"onPageChange(page)\\\">\\r\\n        {{page}}\\r\\n      </button>\\r\\n      <span *ngIf=\\\"page === -1\\\">...</span>\\r\\n    </span>\\r\\n    \\r\\n    <button (click)=\\\"goToNextPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Next</button>\\r\\n    <button (click)=\\\"goToLastPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Last</button>\\r\\n  </div>\\r\\n</div>\", styles: [\".table-container{display:flex;flex-direction:column;gap:1rem;padding:1rem;width:100%;height:100%;overflow:auto}.table-container .toolbar{display:flex;gap:.5rem;align-items:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .toolbar button{padding:.5rem 1rem;border:1px solid #ddd;border-radius:4px;background-color:#fff;cursor:pointer}.table-container .toolbar button:hover{background-color:#f0f0f0}.table-container .toolbar button:active{background-color:#e0e0e0}.table-container table{width:100%;border-collapse:collapse;background-color:red}.table-container table th,.table-container table td{padding:.75rem;border:1px solid #ddd;text-align:left}.table-container table th input,.table-container table td input{width:100%;padding:.25rem;border:1px solid #ddd;border-radius:2px}.table-container table th input:focus,.table-container table td input:focus{outline:none;border-color:#2196f3}.table-container table th{background-color:#f5f5f5;font-weight:600}.table-container table th button{margin-left:.5rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table th button:hover{background-color:#f0f0f0}.table-container table tr:hover{background-color:#f8f8f8}.table-container table tr.selected{background-color:#e3f2fd}.table-container table tr.selected:hover{background-color:#e1f0fb}.table-container table tbody tr td:last-child{white-space:nowrap}.table-container table tbody tr td:last-child button{margin:0 .25rem;padding:.25rem .5rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container table tbody tr td:last-child button:hover{background-color:#f0f0f0}.table-container .pagination{display:flex;gap:.5rem;align-items:center;justify-content:center;padding:.5rem;background-color:#f5f5f5;border-radius:4px}.table-container .pagination select{padding:.25rem;border:1px solid #ddd;border-radius:2px;background-color:#fff}.table-container .pagination select:focus{outline:none;border-color:#2196f3}.table-container .pagination button{padding:.25rem .75rem;border:1px solid #ddd;border-radius:2px;background-color:#fff;cursor:pointer}.table-container .pagination button:hover:not([disabled]){background-color:#f0f0f0}.table-container .pagination button:active:not([disabled]){background-color:#e0e0e0}.table-container .pagination button[disabled]{opacity:.5;cursor:not-allowed}.table-container .pagination button.active{background-color:#2196f3;color:#fff;border-color:#2196f3}.table-container .pagination button.active:hover{background-color:#1976d2}.filter-row.ng-enter,.filter-row.ng-leave{transition:all .3s ease}.filter-row.ng-enter{opacity:0;transform:translateY(-20px)}.filter-row.ng-enter-active,.filter-row.ng-leave{opacity:1;transform:translateY(0)}.filter-row.ng-leave-active{opacity:0;transform:translateY(-20px)}\\n\"] }]\n        }], ctorParameters: function () { return []; }, propDecorators: { tableContainer: [{\n                type: ViewChild,\n                args: ['tableContainer', { static: true }]\n            }], data: [{\n                type: Input\n            }], config: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], rowAdd: [{\n                type: Output\n            }], rowEdit: [{\n                type: Output\n            }], rowDelete: [{\n                type: Output\n            }], sortChange: [{\n                type: Output\n            }], filterChange: [{\n                type: Output\n            }] } });\n\nclass IxtTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, declarations: [IxtTableComponent], imports: [CommonModule,\n            FormsModule], exports: [IxtTableComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, imports: [CommonModule,\n            FormsModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: IxtTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        IxtTableComponent\n                    ],\n                    imports: [\n                        CommonModule,\n                        FormsModule\n                    ],\n                    exports: [\n                        IxtTableComponent\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IxtTableComponent, IxtTableModule };\n//# sourceMappingURL=dvanauken-ixtlan.mjs.map\n","map":null,"preliminaryFileName":"dvanauken-ixtlan.mjs","sourcemapFileName":"dvanauken-ixtlan.mjs.map"},{"fileName":"dvanauken-ixtlan.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"dvanauken-ixtlan.mjs\",\"sources\":[\"../../../src/components/ixt-table/ixt-table.component.ts\",\"../../../src/components/ixt-table/ixt-table.component.html\",\"../../../src/components/ixt-table/ixt-table.module.ts\",\"../../../src/dvanauken-ixtlan.ts\"],\"sourcesContent\":[\"import { Component, OnInit, AfterViewInit, OnDestroy, ElementRef, ViewChild, Input, Output, EventEmitter, Inject } from '@angular/core';\\r\\nimport { Subscription } from 'rxjs';\\r\\nimport { TableConfig, TableColumnDef, PaginationConfig } from './ixt-table.interfaces';\\r\\nimport { ChangeDetectorRef, inject } from '@angular/core';\\r\\n\\r\\n@Component({\\r\\n  selector: 'ixt-table',\\r\\n  templateUrl: './ixt-table.component.html',\\r\\n  styleUrls: ['./ixt-table.component.scss']\\r\\n})\\r\\nexport class IxtTableComponent<T extends object> implements OnInit, AfterViewInit, OnDestroy {\\r\\n  @ViewChild('tableContainer', { static: true }) tableContainer!: ElementRef;\\r\\n  \\r\\n  @Input() data: T[] = [];\\r\\n  @Input() config!: TableConfig<T>;\\r\\n  \\r\\n  @Output() selectionChange = new EventEmitter<T[]>();\\r\\n  @Output() rowAdd = new EventEmitter<T>();\\r\\n  @Output() rowEdit = new EventEmitter<{ original: T, changes: Partial<T> }>();\\r\\n  @Output() rowDelete = new EventEmitter<T>();\\r\\n  @Output() sortChange = new EventEmitter<{ column: keyof T, direction: 'asc' | 'desc' }>();\\r\\n  @Output() filterChange = new EventEmitter<{ column: keyof T, value: string }>();\\r\\n\\r\\n  private resizeObserver!: ResizeObserver;\\r\\n  private cdr = inject(ChangeDetectorRef);\\r\\n  selectedRows = new Set<T>();\\r\\n  lastClickedRowIndex: number | null = null;\\r\\n  editingRows = new Set<number>();\\r\\n  showFilters = false;\\r\\n  paginatedData: T[] = [];\\r\\n\\r\\n  pagination: PaginationConfig = {\\r\\n    pageSize: 10,\\r\\n    currentPage: 1,\\r\\n    totalItems: 0,\\r\\n    pageSizeOptions: [10, 25, 50, 100, -1]\\r\\n  };\\r\\n\\r\\n  constructor() {}\\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.initTable();\\r\\n  }\\r\\n\\r\\n  ngAfterViewInit(): void {\\r\\n    this.resizeObserver = new ResizeObserver(() => {\\r\\n      this.resizeTable();\\r\\n    });\\r\\n    this.resizeObserver.observe(this.tableContainer.nativeElement);\\r\\n  }\\r\\n\\r\\n  ngOnDestroy(): void {\\r\\n    if (this.resizeObserver) {\\r\\n      this.resizeObserver.disconnect();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  private initTable(): void {\\r\\n    this.pagination.totalItems = this.data.length;\\r\\n    this.updatePaginatedData();\\r\\n  }\\r\\n\\r\\n  isRowSelected(row: T): boolean {\\r\\n    return this.selectedRows.has(row);\\r\\n  }\\r\\n\\r\\n  isEditing(index: number): boolean {\\r\\n    return this.editingRows.has(index);\\r\\n  }\\r\\n\\r\\n  formatCell(value: any, column: TableColumnDef<T>): string {\\r\\n    if (column.formatter) {\\r\\n      return column.formatter(value);\\r\\n    }\\r\\n    return value?.toString() ?? '';\\r\\n  }\\r\\n\\r\\n  onAddNewRow(): void {\\r\\n    const newRow = {} as T;\\r\\n    this.data.unshift(newRow);\\r\\n    this.editingRows.add(0);\\r\\n    this.rowAdd.emit(newRow);\\r\\n    this.updatePaginatedData();\\r\\n  }\\r\\n\\r\\n  onFieldChange(event: Event, field: keyof T, row: T, index: number): void {\\r\\n    const input = event.target as HTMLInputElement;\\r\\n    const value = input.value;\\r\\n    \\r\\n    const column = this.config.columns.find((col: TableColumnDef<T>) => col.key === field);\\r\\n    if (column?.validator) {\\r\\n      const validationResult = column.validator(value);\\r\\n      if (typeof validationResult === 'string') {\\r\\n        alert(validationResult);\\r\\n        return;\\r\\n      }\\r\\n      if (!validationResult) {\\r\\n        return;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    (row[field] as any) = value;\\r\\n  }\\r\\n\\r\\n  onRowClick(row: T, index: number, event: MouseEvent): void {\\r\\n    if (this.editingRows.size > 0) return;\\r\\n    if (this.config.selectionMode === 'none') return;\\r\\n\\r\\n    this.lastClickedRowIndex = index;\\r\\n    \\r\\n    if (this.config.selectionMode === 'single') {\\r\\n      this.selectedRows.clear();\\r\\n      this.selectedRows.add(row);\\r\\n    } else if (this.config.selectionMode === 'multiple') {\\r\\n      if (event.shiftKey && this.lastClickedRowIndex !== null) {\\r\\n        const start = Math.min(index, this.lastClickedRowIndex);\\r\\n        const end = Math.max(index, this.lastClickedRowIndex);\\r\\n        this.selectedRows = new Set(this.paginatedData.slice(start, end + 1));\\r\\n      } else if (event.ctrlKey || event.metaKey) {\\r\\n        if (this.selectedRows.has(row)) {\\r\\n          this.selectedRows.delete(row);\\r\\n        } else {\\r\\n          this.selectedRows.add(row);\\r\\n        }\\r\\n      } else {\\r\\n        this.selectedRows.clear();\\r\\n        this.selectedRows.add(row);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    this.selectionChange.emit(Array.from(this.selectedRows));\\r\\n  }\\r\\n\\r\\n  onEdit(row: T, index: number, event: Event): void {\\r\\n    event.stopPropagation();\\r\\n    (row as any).originalData = { ...row };\\r\\n    this.editingRows.add(index);\\r\\n  }\\r\\n\\r\\n  onSave(row: T, index: number): void {\\r\\n    const changes = {} as Partial<T>;\\r\\n    const original = (row as any).originalData;\\r\\n    \\r\\n    for (const key of Object.keys(row) as (keyof T)[]) {\\r\\n      if (key !== 'originalData' && row[key] !== original[key]) {\\r\\n        changes[key] = row[key];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    this.rowEdit.emit({ original, changes });\\r\\n    this.editingRows.delete(index);\\r\\n    delete (row as any).originalData;\\r\\n  }\\r\\n\\r\\n  onCancel(row: T, index: number): void {\\r\\n    const original = (row as any).originalData;\\r\\n    Object.assign(row, original);\\r\\n    this.editingRows.delete(index);\\r\\n    delete (row as any).originalData;\\r\\n  }\\r\\n\\r\\n  onDelete(row: T, index: number, event: Event): void {\\r\\n    event.stopPropagation();\\r\\n    if (confirm('Are you sure you want to delete this row?')) {\\r\\n      this.data = this.data.filter((_, i) => i !== index);\\r\\n      this.rowDelete.emit(row);\\r\\n      this.updatePaginatedData();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  onSaveAll(): void {\\r\\n    for (const index of Array.from(this.editingRows)) {\\r\\n      const row = this.paginatedData[index];\\r\\n      this.onSave(row, index);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  onSort(column: TableColumnDef<T>): void {\\r\\n    this.sortChange.emit({ \\r\\n      column: column.key, \\r\\n      direction: 'asc' // Toggle this based on current state\\r\\n    });\\r\\n  }\\r\\n\\r\\n  onFilter(event: Event, column: TableColumnDef<T>): void {\\r\\n    const input = event.target as HTMLInputElement;\\r\\n    this.filterChange.emit({ column: column.key, value: input.value });\\r\\n  }\\r\\n\\r\\n  updatePaginatedData(): void {\\r\\n    if (this.pagination.pageSize === -1) {\\r\\n      this.paginatedData = [...this.data];\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const startIndex = (this.pagination.currentPage - 1) * this.pagination.pageSize;\\r\\n    const endIndex = startIndex + this.pagination.pageSize;\\r\\n    this.paginatedData = this.data.slice(startIndex, endIndex);\\r\\n  }\\r\\n\\r\\n  get totalPages(): number {\\r\\n    if (this.pagination.pageSize === -1) return 1;\\r\\n    return Math.ceil(this.pagination.totalItems / this.pagination.pageSize);\\r\\n  }\\r\\n\\r\\n  get visiblePages(): number[] {\\r\\n    const totalPages = this.totalPages;\\r\\n    const current = this.pagination.currentPage;\\r\\n    const pages: number[] = [];\\r\\n\\r\\n    if (totalPages <= 7) {\\r\\n      for (let i = 1; i <= totalPages; i++) pages.push(i);\\r\\n    } else {\\r\\n      pages.push(1);\\r\\n      if (current > 3) pages.push(-1);\\r\\n      for (let i = Math.max(2, current - 1); i <= Math.min(totalPages - 1, current + 1); i++) {\\r\\n        pages.push(i);\\r\\n      }\\r\\n      if (current < totalPages - 2) pages.push(-1);\\r\\n      pages.push(totalPages);\\r\\n    }\\r\\n\\r\\n    return pages;\\r\\n  }\\r\\n\\r\\n  onPageSizeChange(event: Event): void {\\r\\n    const select = event.target as HTMLSelectElement;\\r\\n    const newSize = parseInt(select.value, 10);\\r\\n    this.pagination.pageSize = newSize;\\r\\n    this.pagination.currentPage = 1;\\r\\n    this.updatePaginatedData();\\r\\n  }\\r\\n\\r\\n  onPageChange(page: number): void {\\r\\n    if (page < 1 || page > this.totalPages) return;\\r\\n    this.pagination.currentPage = page;\\r\\n    this.updatePaginatedData();\\r\\n  }\\r\\n\\r\\n  goToFirstPage(): void { this.onPageChange(1); }\\r\\n  goToLastPage(): void { this.onPageChange(this.totalPages); }\\r\\n  goToPreviousPage(): void { this.onPageChange(this.pagination.currentPage - 1); }\\r\\n  goToNextPage(): void { this.onPageChange(this.pagination.currentPage + 1); }\\r\\n\\r\\n  private resizeTable(): void {\\r\\n    if (this.tableContainer) {\\r\\n      const width = this.tableContainer.nativeElement.offsetWidth;\\r\\n      const height = this.tableContainer.nativeElement.offsetHeight;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  toggleFilters(event?: Event): void {\\r\\n    if (event) {\\r\\n      event.stopPropagation();\\r\\n    }\\r\\n    this.showFilters = !this.showFilters;\\r\\n  }\\r\\n}\",\"<div class=\\\"table-container\\\" #tableContainer>\\r\\n  <!-- Toolbar -->\\r\\n  <div class=\\\"toolbar\\\">\\r\\n    <button *ngIf=\\\"config.allowAdd\\\" (click)=\\\"onAddNewRow()\\\">Add New</button>\\r\\n    <button *ngIf=\\\"editingRows.size > 0\\\" (click)=\\\"onSaveAll()\\\">Save All</button>\\r\\n    <button (click)=\\\"toggleFilters($event)\\\">\\r\\n      {{ showFilters ? 'Hide Filters' : 'Show Filters' }}\\r\\n    </button>\\r\\n  </div>\\r\\n\\r\\n  <!-- Table -->\\r\\n  <table>\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          {{col.header}}\\r\\n          <button *ngIf=\\\"col.sortable\\\" (click)=\\\"onSort(col)\\\">Sort</button>\\r\\n        </th>\\r\\n        <th *ngIf=\\\"config.allowEdit || config.allowDelete\\\">Actions</th>\\r\\n      </tr>\\r\\n      <tr *ngIf=\\\"showFilters\\\">\\r\\n        <th *ngFor=\\\"let col of config.columns\\\">\\r\\n          <input *ngIf=\\\"col.filterable\\\" \\r\\n                 [placeholder]=\\\"'Filter ' + col.header\\\"\\r\\n                 (input)=\\\"onFilter($event, col)\\\">\\r\\n        </th>\\r\\n        <th></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let row of paginatedData; let i = index\\\"\\r\\n          [class.selected]=\\\"isRowSelected(row)\\\"\\r\\n          (click)=\\\"onRowClick(row, i, $event)\\\">\\r\\n        <td *ngFor=\\\"let col of config.columns\\\">\\r\\n          <ng-container *ngIf=\\\"!isEditing(i); else editCell\\\">\\r\\n            {{ formatCell(row[col.key], col) }}\\r\\n          </ng-container>\\r\\n          <ng-template #editCell>\\r\\n            <input [value]=\\\"row[col.key]\\\"\\r\\n                   (input)=\\\"onFieldChange($event, col.key, row, i)\\\">\\r\\n          </ng-template>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"config.allowEdit || config.allowDelete\\\">\\r\\n          <button *ngIf=\\\"config.allowEdit && !isEditing(i)\\\" \\r\\n                  (click)=\\\"onEdit(row, i, $event)\\\">Edit</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onSave(row, i)\\\">Save</button>\\r\\n          <button *ngIf=\\\"isEditing(i)\\\" \\r\\n                  (click)=\\\"onCancel(row, i)\\\">Cancel</button>\\r\\n          <button *ngIf=\\\"config.allowDelete\\\" \\r\\n                  (click)=\\\"onDelete(row, i, $event)\\\">Delete</button>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n\\r\\n  <!-- Pagination -->\\r\\n  <div class=\\\"pagination\\\">\\r\\n    <select (change)=\\\"onPageSizeChange($event)\\\">\\r\\n      <option *ngFor=\\\"let size of pagination.pageSizeOptions\\\" \\r\\n              [value]=\\\"size\\\">\\r\\n        {{size === -1 ? 'All' : size}}\\r\\n      </option>\\r\\n    </select>\\r\\n    \\r\\n    <button (click)=\\\"goToFirstPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">First</button>\\r\\n    <button (click)=\\\"goToPreviousPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === 1\\\">Previous</button>\\r\\n    \\r\\n    <span *ngFor=\\\"let page of visiblePages\\\">\\r\\n      <button *ngIf=\\\"page !== -1\\\"\\r\\n              [class.active]=\\\"page === pagination.currentPage\\\"\\r\\n              (click)=\\\"onPageChange(page)\\\">\\r\\n        {{page}}\\r\\n      </button>\\r\\n      <span *ngIf=\\\"page === -1\\\">...</span>\\r\\n    </span>\\r\\n    \\r\\n    <button (click)=\\\"goToNextPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Next</button>\\r\\n    <button (click)=\\\"goToLastPage()\\\" \\r\\n            [disabled]=\\\"pagination.currentPage === totalPages\\\">Last</button>\\r\\n  </div>\\r\\n</div>\",\"import { NgModule } from '@angular/core';\\r\\nimport { CommonModule } from '@angular/common';\\r\\nimport { FormsModule } from '@angular/forms';\\r\\nimport { IxtTableComponent } from './ixt-table.component';\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [\\r\\n    IxtTableComponent\\r\\n  ],\\r\\n  imports: [\\r\\n    CommonModule,\\r\\n    FormsModule\\r\\n  ],\\r\\n  exports: [\\r\\n    IxtTableComponent\\r\\n  ]\\r\\n})\\r\\nexport class IxtTableModule { }\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[],\"mappings\":\";;;;;;;MAUa,iBAAiB,CAAA;AA4B5B,IAAA,WAAA,GAAA;QAzBS,IAAI,CAAA,IAAA,GAAQ,EAAE,CAAC;AAGd,QAAA,IAAA,CAAA,eAAe,GAAG,IAAI,YAAY,EAAO,CAAC;AAC1C,QAAA,IAAA,CAAA,MAAM,GAAG,IAAI,YAAY,EAAK,CAAC;AAC/B,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,YAAY,EAAwC,CAAC;AACnE,QAAA,IAAA,CAAA,SAAS,GAAG,IAAI,YAAY,EAAK,CAAC;AAClC,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,YAAY,EAAkD,CAAC;AAChF,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,YAAY,EAAsC,CAAC;AAGxE,QAAA,IAAA,CAAA,GAAG,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC;AACxC,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,GAAG,EAAK,CAAC;QAC5B,IAAmB,CAAA,mBAAA,GAAkB,IAAI,CAAC;AAC1C,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;QAChC,IAAW,CAAA,WAAA,GAAG,KAAK,CAAC;QACpB,IAAa,CAAA,aAAA,GAAQ,EAAE,CAAC;AAExB,QAAA,IAAA,CAAA,UAAU,GAAqB;AAC7B,YAAA,QAAQ,EAAE,EAAE;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,eAAe,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;SACvC,CAAC;KAEc;IAEhB,QAAQ,GAAA;QACN,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;IAED,eAAe,GAAA;AACb,QAAA,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,MAAK;YAC5C,IAAI,CAAC,WAAW,EAAE,CAAC;AACrB,SAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;KAChE;IAED,WAAW,GAAA;QACT,IAAI,IAAI,CAAC,cAAc,EAAE;AACvB,YAAA,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;AAClC,SAAA;KACF;IAEO,SAAS,GAAA;QACf,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAC9C,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;AAED,IAAA,aAAa,CAAC,GAAM,EAAA;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACnC;AAED,IAAA,SAAS,CAAC,KAAa,EAAA;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACpC;IAED,UAAU,CAAC,KAAU,EAAE,MAAyB,EAAA;QAC9C,IAAI,MAAM,CAAC,SAAS,EAAE;AACpB,YAAA,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAChC,SAAA;AACD,QAAA,OAAO,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;KAChC;IAED,WAAW,GAAA;QACT,MAAM,MAAM,GAAG,EAAO,CAAC;AACvB,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1B,QAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxB,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;AAED,IAAA,aAAa,CAAC,KAAY,EAAE,KAAc,EAAE,GAAM,EAAE,KAAa,EAAA;AAC/D,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,MAA0B,CAAC;AAC/C,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAE1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAsB,KAAK,GAAG,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC;QACvF,IAAI,MAAM,EAAE,SAAS,EAAE;YACrB,MAAM,gBAAgB,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACjD,YAAA,IAAI,OAAO,gBAAgB,KAAK,QAAQ,EAAE;gBACxC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBACxB,OAAO;AACR,aAAA;YACD,IAAI,CAAC,gBAAgB,EAAE;gBACrB,OAAO;AACR,aAAA;AACF,SAAA;AAEA,QAAA,GAAG,CAAC,KAAK,CAAS,GAAG,KAAK,CAAC;KAC7B;AAED,IAAA,UAAU,CAAC,GAAM,EAAE,KAAa,EAAE,KAAiB,EAAA;AACjD,QAAA,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC;YAAE,OAAO;AACtC,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,KAAK,MAAM;YAAE,OAAO;AAEjD,QAAA,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;AAEjC,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,KAAK,QAAQ,EAAE;AAC1C,YAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;AAC1B,YAAA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,SAAA;AAAM,aAAA,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,KAAK,UAAU,EAAE;YACnD,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,mBAAmB,KAAK,IAAI,EAAE;AACvD,gBAAA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;AACxD,gBAAA,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;AACtD,gBAAA,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACvE,aAAA;AAAM,iBAAA,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,EAAE;gBACzC,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AAC9B,oBAAA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,iBAAA;AAAM,qBAAA;AACL,oBAAA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,iBAAA;AACF,aAAA;AAAM,iBAAA;AACL,gBAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;AAC1B,gBAAA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,aAAA;AACF,SAAA;AAED,QAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;KAC1D;AAED,IAAA,MAAM,CAAC,GAAM,EAAE,KAAa,EAAE,KAAY,EAAA;QACxC,KAAK,CAAC,eAAe,EAAE,CAAC;AACvB,QAAA,GAAW,CAAC,YAAY,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC;AACvC,QAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC7B;IAED,MAAM,CAAC,GAAM,EAAE,KAAa,EAAA;QAC1B,MAAM,OAAO,GAAG,EAAgB,CAAC;AACjC,QAAA,MAAM,QAAQ,GAAI,GAAW,CAAC,YAAY,CAAC;QAE3C,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAgB,EAAE;AACjD,YAAA,IAAI,GAAG,KAAK,cAAc,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACxD,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACzB,aAAA;AACF,SAAA;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;AACzC,QAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAQ,GAAW,CAAC,YAAY,CAAC;KAClC;IAED,QAAQ,CAAC,GAAM,EAAE,KAAa,EAAA;AAC5B,QAAA,MAAM,QAAQ,GAAI,GAAW,CAAC,YAAY,CAAC;AAC3C,QAAA,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;AAC7B,QAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAQ,GAAW,CAAC,YAAY,CAAC;KAClC;AAED,IAAA,QAAQ,CAAC,GAAM,EAAE,KAAa,EAAE,KAAY,EAAA;QAC1C,KAAK,CAAC,eAAe,EAAE,CAAC;AACxB,QAAA,IAAI,OAAO,CAAC,2CAA2C,CAAC,EAAE;YACxD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC;AACpD,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAC5B,SAAA;KACF;IAED,SAAS,GAAA;QACP,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAChD,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACtC,YAAA,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACzB,SAAA;KACF;AAED,IAAA,MAAM,CAAC,MAAyB,EAAA;AAC9B,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,MAAM,CAAC,GAAG;YAClB,SAAS,EAAE,KAAK;AACjB,SAAA,CAAC,CAAC;KACJ;IAED,QAAQ,CAAC,KAAY,EAAE,MAAyB,EAAA;AAC9C,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,MAA0B,CAAC;AAC/C,QAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;KACpE;IAED,mBAAmB,GAAA;QACjB,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,KAAK,CAAC,CAAC,EAAE;YACnC,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,OAAO;AACR,SAAA;AAED,QAAA,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QAChF,MAAM,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;AACvD,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;KAC5D;AAED,IAAA,IAAI,UAAU,GAAA;AACZ,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,KAAK,CAAC,CAAC;AAAE,YAAA,OAAO,CAAC,CAAC;AAC9C,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KACzE;AAED,IAAA,IAAI,YAAY,GAAA;AACd,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACnC,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QAC5C,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,IAAI,UAAU,IAAI,CAAC,EAAE;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,EAAE;AAAE,gBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrD,SAAA;AAAM,aAAA;AACL,YAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACd,IAAI,OAAO,GAAG,CAAC;AAAE,gBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,YAAA,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AACtF,gBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACf,aAAA;AACD,YAAA,IAAI,OAAO,GAAG,UAAU,GAAG,CAAC;AAAE,gBAAA,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,YAAA,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACxB,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KACd;AAED,IAAA,gBAAgB,CAAC,KAAY,EAAA;AAC3B,QAAA,MAAM,MAAM,GAAG,KAAK,CAAC,MAA2B,CAAC;QACjD,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC3C,QAAA,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,OAAO,CAAC;AACnC,QAAA,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;AAED,IAAA,YAAY,CAAC,IAAY,EAAA;QACvB,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU;YAAE,OAAO;AAC/C,QAAA,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;QACnC,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;IAED,aAAa,GAAA,EAAW,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;IAC/C,YAAY,GAAA,EAAW,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE;AAC5D,IAAA,gBAAgB,GAAW,EAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,EAAE;AAChF,IAAA,YAAY,GAAW,EAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,EAAE;IAEpE,WAAW,GAAA;QACjB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC;YAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC;AAC/D,SAAA;KACF;AAED,IAAA,aAAa,CAAC,KAAa,EAAA;AACzB,QAAA,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,eAAe,EAAE,CAAC;AACzB,SAAA;AACD,QAAA,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;KACtC;+GAtPU,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAAjB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,iBAAiB,oYCV9B,80GAoFM,EAAA,MAAA,EAAA,CAAA,ozFAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,cAAA,EAAA,eAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,cAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,EAAA,CAAA,uBAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;4FD1EO,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAL7B,SAAS;+BACE,WAAW,EAAA,QAAA,EAAA,80GAAA,EAAA,MAAA,EAAA,CAAA,ozFAAA,CAAA,EAAA,CAAA;0EAK0B,cAAc,EAAA,CAAA;sBAA5D,SAAS;AAAC,gBAAA,IAAA,EAAA,CAAA,gBAAgB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAA;gBAEpC,IAAI,EAAA,CAAA;sBAAZ,KAAK;gBACG,MAAM,EAAA,CAAA;sBAAd,KAAK;gBAEI,eAAe,EAAA,CAAA;sBAAxB,MAAM;gBACG,MAAM,EAAA,CAAA;sBAAf,MAAM;gBACG,OAAO,EAAA,CAAA;sBAAhB,MAAM;gBACG,SAAS,EAAA,CAAA;sBAAlB,MAAM;gBACG,UAAU,EAAA,CAAA;sBAAnB,MAAM;gBACG,YAAY,EAAA,CAAA;sBAArB,MAAM;;;MEJI,cAAc,CAAA;+GAAd,cAAc,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA,EAAA;gHAAd,cAAc,EAAA,YAAA,EAAA,CAVvB,iBAAiB,CAAA,EAAA,OAAA,EAAA,CAGjB,YAAY;AACZ,YAAA,WAAW,aAGX,iBAAiB,CAAA,EAAA,CAAA,CAAA,EAAA;AAGR,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,cAAc,YAPvB,YAAY;YACZ,WAAW,CAAA,EAAA,CAAA,CAAA,EAAA;;4FAMF,cAAc,EAAA,UAAA,EAAA,CAAA;kBAZ1B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,YAAY,EAAE;wBACZ,iBAAiB;AAClB,qBAAA;AACD,oBAAA,OAAO,EAAE;wBACP,YAAY;wBACZ,WAAW;AACZ,qBAAA;AACD,oBAAA,OAAO,EAAE;wBACP,iBAAiB;AAClB,qBAAA;AACF,iBAAA,CAAA;;;AChBD;;AAEG;;;;\"}","type":"asset"}]}