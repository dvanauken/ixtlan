+-- src
|   +-- app
|   |   +-- accordion
|   |   |   -- accordion.data.ts: import { Injectable } from '@angular/core'; import { AccordionPanel } from '../../components/ixt-accordian/ixt-accordian.component';  @Injectable({   providedIn: 'root' }) export class AccordianDataService {   getAccordianPanels(): AccordionPanel[] {     return [       {         title: 'Section 1',         content: 'Content for section 1',         isOpen: false       },       {         title: 'Section 2',         content: 'Content for section 2',         isOpen: false       },       {         title: 'Section 3',         content: 'Content for section 3',         isOpen: false       }     ];   } }
|   |   +-- app.component.html: <main>   <nav>       <ixt-tabset title="Employee Form">           <ixt-tab title="Tab 1">               <ixt-tree [nodes]="treeProvider.treeData"                         (nodeExpanded)="treeHandler.onNodeExpanded($event)"                        (nodeCollapsed)="treeHandler.onNodeCollapsed($event)"                         (nodeSelected)="treeHandler.onNodeSelected($event)">               </ixt-tree>           </ixt-tab>           <ixt-tab title="Tab 2">               <ixt-accordian [panels]="accordionPanels" [allowMultiple]="true">               </ixt-accordian>           </ixt-tab>       </ixt-tabset>   </nav>    <header>       <ixt-menu [menuData]="menuProvider.getMenuData()"></ixt-menu>   </header>    <section>       <ixt-tabset>         <ixt-tab title="Tab 0">           <h1>D3 Geo</h1>           <hr />           <ixt-map width="800" height="600" scale="1" translate="0,0">             <ixt-layer src="./../assets/countries.geojson" stroke="black" fill="beige"></ixt-layer>             <ixt-layer src="./../assets/lakes.geojson" stroke="black" fill="blue" (click)="select($event)"></ixt-layer>             <ixt-layer src="./../assets/rivers.geojson" stroke="purple" fill="none" (hover)="highlight($event)"></ixt-layer>           </ixt-map>       </ixt-tab>       <ixt-tab title="Tab 1">               <ixt-table [data]="tableProvider.employeeData" [config]="tableProvider.employeeConfig"></ixt-table>           </ixt-tab>           <ixt-tab title="Tab 2">               <ixt-table [data]="tableProvider.salesData" [config]="tableProvider.salesConfig"></ixt-table>           </ixt-tab>           <ixt-tab title="Tab 3">               <ixt-table [data]="tableProvider.inventoryData" [config]="tableProvider.inventoryConfig"></ixt-table>           </ixt-tab>            <ixt-tab title="Employee Form">             <form class="form-grid">               <h3>Personal Information</h3>               <div class="field">                 <label>First Name</label>                 <input type="text" [(ngModel)]="formData.firstName" name="firstName">               </div>               <div class="field">                 <label>Last Name</label>                 <input type="text" [(ngModel)]="formData.lastName" name="lastName">               </div>               <div class="field">                 <label>Email</label>                 <input type="email" [(ngModel)]="formData.email" name="email">               </div>               <h3>Employment Details</h3>               <div class="field">                 <label>Department</label>                 <input type="text" [(ngModel)]="formData.department" name="department">               </div>               <div class="field">                 <label>Position</label>                 <input type="text" [(ngModel)]="formData.position" name="position">               </div>               <div class="field">                 <label>Start Date</label>                 <input type="date" [(ngModel)]="formData.hireDate" name="hireDate">               </div>               <div class="actions">                 <button type="button" (click)="employeeFormHandler.submitForm()">Save</button>                 <button type="button" (click)="employeeFormHandler.resetForm()">Cancel</button>               </div>             </form>           </ixt-tab>              <ixt-tab title="Auto Complete">               <h2>Map Projection Selector</h2>               <ixt-auto-complete [options]="autocompleteProvider.projectionOptions"                                 placeholder="Search projection..."                                (valueChange)="autocompleteHandler.onValueChange($event)">               </ixt-auto-complete>           </ixt-tab>           <ixt-tab title="Calendar">               <ixt-calendar></ixt-calendar>           </ixt-tab>           <ixt-tab title="IxtMatrix">             <ixt-tabset>               <ixt-tab title="Standard Table">                 <ixt-matrix                    [data]="matrixAirportData"                   [columnConfigs]="matrixColumnConfigs"                    *ngIf="matrixAirportData.length">                 </ixt-matrix>               </ixt-tab>               <ixt-tab title="Tree">                 <ixt-matrix [data]="matrixTreeData"></ixt-matrix>               </ixt-tab>               <ixt-tab title="Table Tree">                 <ixt-matrix [data]="matrixTableTreeData"></ixt-matrix>               </ixt-tab>             </ixt-tabset>          </ixt-tab>           <ixt-tab title="IxtSplitPane">             <ixt-split-pane>               <div class="left-pane">                 <h2>Left</h2>               </div>               <div class="right-pane">                 <h2>Right</h2>               </div>             </ixt-split-pane>           </ixt-tab>           <ixt-tab title="Panels">             <h2>Examples</h2>             <div class="ixt-panel-container">                 <div class="panel-grid">                     <ixt-panel title="Basic Panel">                         <div class="panel-content">                             This is a basic panel with default settings (bordered=true, elevated=false)                         </div>                     </ixt-panel>                                  <ixt-panel title="Elevated Panel" [elevated]="true" caption="With caption text">                         <div class="panel-content">                             This panel has elevation enabled, creating a shadow effect                         </div>                     </ixt-panel>                                  <ixt-panel title="No Border Panel" [bordered]="false" [padding]="true">                         <div class="panel-content">                             This panel has borders disabled but keeps padding                         </div>                     </ixt-panel>                                  <ixt-panel [bordered]="false" [padding]="false" [elevated]="false">                         <div class="panel-content">                             A minimal panel without title, borders, elevation or padding                         </div>                     </ixt-panel>                 </div>             </div>           </ixt-tab>       </ixt-tabset>   </section>    <aside>     <ixt-layer-manager        [layers]="layerProvider.mapLayers"        (layerChange)="layerManager.onLayerChange($event)"       (layerOrderChange)="layerManager.onLayerOrderChange($event)">     </ixt-layer-manager>     <!-- Layer manager commented out -->   </aside>    <footer>Footer</footer> </main>  <ixt-dialog></ixt-dialog>
|   |   +-- app.component.scss: /* Component-specific styles */ nav, header, section, aside, footer {   padding: 1rem;   background: white;   box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
|   |   +-- app.component.ts: // app.component.ts import { Component, ViewChild, AfterViewInit } from '@angular/core'; import { IxtDialogComponent, DialogType, DialogButton, DialogResult } from '../components/ixt-dialog/ixt-dialog.index'; import { Layer } from '../components/ixt-layer-manager/ixt-layer-manager.component'; import { TreeNode } from '../components/ixt-tree/ixt-tree.component'; import { AccordionPanel } from '../components/ixt-accordian/ixt-accordian.component';  import { Expression, ExpressionGroup } from '../components/ixt-expression-builder/ixt-expression-builder.interfaces'; import { AutocompleteOption } from '../components/ixt-auto-complete/ixt-auto-complete.component';  import { IxtTableProvider } from './table/ixt-table.provider'; import { IxtTableHandler } from './table/ixt-table.handler'; import { IxtLayerProvider } from './layer/ixt-layer.provider'; import { IxtLayerManager } from './layer/ixt-layer.manager'; import { IxtTreeProvider } from './tree/ixt-tree.provider'; import { IxtTreeHandler } from './tree/ixt-tree.handler'; import { IxtExpressionProvider } from './expression/ixt-expression.provider'; import { IxtExpressionHelper } from './expression/ixt-expression.helper'; import { IxtAutocompleteProvider } from './autocomplete/ixt-autocomplete.provider'; import { IxtAutocompleteHandler } from './autocomplete/ixt-autocomplete.handler'; import { IxtEmployeeFormProvider } from './form/ixt-employee-form.provider'; import { IxtEmployeeFormHandler } from './form/ixt-employee-form.handler'; import { IxtMatrixProvider } from './matrix/ixt-matrix.provider'; import { IxtMenuProvider } from './menu/ixt-menu.provider'; import { AccordianDataService } from './accordion/accordion.data';   @Component({   selector: 'app-root',   templateUrl: './app.component.html',   styleUrls: ['./app.component.scss'],   providers: [     IxtTableProvider,     IxtTableHandler,     IxtLayerProvider,     IxtLayerManager,     IxtTreeProvider,     IxtTreeHandler,     IxtExpressionProvider,     IxtExpressionHelper,     IxtAutocompleteProvider,     IxtAutocompleteHandler,     IxtEmployeeFormProvider,     IxtEmployeeFormHandler,     IxtMatrixProvider,     IxtMenuProvider   ] }) export class AppComponent implements AfterViewInit {   [x: string]: any;   @ViewChild(IxtDialogComponent) dialog!: IxtDialogComponent;   formData = this.employeeFormProvider.getCurrentForm();    matrixTableData = this.matrixProvider.getTableData();   matrixTreeData = this.matrixProvider.getTreeData();   matrixTableTreeData = this.matrixProvider.getTableTreeData();   matrixAirportData: any[] = [];   matrixColumnConfigs = this.matrixProvider.getAirportColumnConfigs();   accordionPanels = this.accordianDataService.getAccordianPanels();    constructor(     public tableProvider: IxtTableProvider,     public tableHandler: IxtTableHandler,     public layerProvider: IxtLayerProvider,     public layerManager: IxtLayerManager,     public treeProvider: IxtTreeProvider,     public treeHandler: IxtTreeHandler,     public expressionProvider: IxtExpressionProvider,     public expressionHelper: IxtExpressionHelper,     public autocompleteProvider: IxtAutocompleteProvider,     public autocompleteHandler: IxtAutocompleteHandler,     public employeeFormProvider: IxtEmployeeFormProvider,     public employeeFormHandler: IxtEmployeeFormHandler,     public matrixProvider: IxtMatrixProvider,     public menuProvider: IxtMenuProvider,     private accordianDataService: AccordianDataService   ) { }    ngOnInit() {     this.matrixProvider.getAirportData().subscribe(data => {       this.matrixAirportData = data;     });   }      ngAfterViewInit() {     if (this.dialog) {       this.dialog.visible = false;     }   }    select(event: Event): void {     console.log('Selected:', event);   }    highlight(event: Event): void {     console.log('Highlighted:', event);   }  }
|   |   +-- app.module.ts: // app.module.ts import { NgModule } from '@angular/core'; import { BrowserModule } from '@angular/platform-browser'; import { BrowserAnimationsModule } from '@angular/platform-browser/animations'; import { FormsModule } from '@angular/forms'; import { HttpClientModule } from '@angular/common/http';  // Component Modules (alphabetized) import { IxtAutoCompleteModule } from '../components/ixt-auto-complete/ixt-auto-complete.module'; import { IxtCalendarModule } from '../components/ixt-calendar/ixt-calendar.module'; import { IxtDialogModule } from '../components/ixt-dialog/ixt-dialog.module'; import { IxtExpressionBuilderModule } from '../components/ixt-expression-builder/ixt-expression-builder.module'; import { IxtHolyGrailModule } from '../components/ixt-holy-grail/ixt-holy-grail.module'; import { IxtLayerManagerModule } from '../components/ixt-layer-manager/ixt-layer-manager.module'; import { IxtTableModule } from '../components/ixt-table/ixt-table.module'; import { IxtTabsetModule } from '../components/ixt-tabset/ixt-tabset.module'; import { IxtTreeModule } from '../components/ixt-tree/ixt-tree.module'; import { IxtMenuModule } from '../components/ixt-menu/ixt-menu.module';  // Components import { AppComponent } from './app.component';  // Providers, Handlers, and Helpers (alphabetized) import { IxtAutocompleteHandler } from './autocomplete/ixt-autocomplete.handler'; import { IxtAutocompleteProvider } from './autocomplete/ixt-autocomplete.provider'; import { IxtEmployeeFormHandler } from './form/ixt-employee-form.handler'; import { IxtEmployeeFormProvider } from './form/ixt-employee-form.provider'; import { IxtExpressionHelper } from './expression/ixt-expression.helper'; import { IxtExpressionProvider } from './expression/ixt-expression.provider'; import { IxtLayerManager } from './layer/ixt-layer.manager'; import { IxtLayerProvider } from './layer/ixt-layer.provider'; import { IxtMatrixProvider } from './matrix/ixt-matrix.provider'; import { IxtTableHandler } from './table/ixt-table.handler'; import { IxtTableProvider } from './table/ixt-table.provider'; import { IxtTreeHandler } from './tree/ixt-tree.handler'; import { IxtTreeProvider } from './tree/ixt-tree.provider'; import { IxtMatrixModule } from 'src/components/ixt-matrix/ixt-matrix.index'; import { IxtSplitPaneModule } from 'src/components/ixt-split-pane'; import { IxtPanelModule } from 'src/components/ixt-panel'; import { IxtAccordianModule } from 'src/components/ixt-accordian/accordian.module';  import { IxtMapModule } from 'src/components/ixt-map/ixt-map.module'; import { RouterModule } from '@angular/router';   @NgModule({   declarations: [     AppComponent   ],   imports: [     RouterModule.forRoot([]),  // No routes defined, but RouterModule is configured     BrowserAnimationsModule,     BrowserModule,     FormsModule,     HttpClientModule,  // Add this line     IxtAccordianModule,       IxtAutoCompleteModule,     IxtCalendarModule,     IxtDialogModule,     IxtExpressionBuilderModule,     IxtHolyGrailModule,     IxtLayerManagerModule,     IxtMatrixModule,     IxtTableModule,     IxtTabsetModule,     IxtTreeModule,     IxtSplitPaneModule,     IxtPanelModule,     IxtMenuModule,     IxtMapModule   ],   providers: [     IxtAutocompleteHandler,     IxtAutocompleteProvider,     IxtEmployeeFormHandler,     IxtEmployeeFormProvider,     IxtExpressionHelper,     IxtExpressionProvider,     IxtLayerManager,     IxtLayerProvider,     IxtMatrixProvider,     IxtTableHandler,     IxtTableProvider,     IxtTreeHandler,     IxtTreeProvider,   ],   bootstrap: [     AppComponent   ] }) export class AppModule { }
|   +-- components
|   |   +-- ixt-map
|   |   |   +-- ixt-layer.component.html: 
|   |   |   +-- ixt-layer.component.scss: 
|   |   |   +-- ixt-layer.component.ts: // ixt-layer.component.ts import { Component, Input, Output, EventEmitter, ElementRef, Host } from '@angular/core'; import * as d3 from 'd3'; import { Feature, GeoJsonProperties, Geometry } from 'geojson'; import { IxtMapComponent } from './ixt-map.component';  @Component({   selector: 'ixt-layer',   template: '<svg:g></svg:g>' }) export class IxtLayerComponent {   @Input() src: string = '';   @Input() stroke: string = 'black';   @Input() fill: string = 'none';   @Output() click = new EventEmitter<MouseEvent>();   @Output() hover = new EventEmitter<MouseEvent>();    private initialized = false;   private pathGenerator!: d3.GeoPath;    constructor(@Host() private mapComponent: IxtMapComponent) {}    setProjection(pathGenerator: d3.GeoPath): void {     this.pathGenerator = pathGenerator;   }    initializeLayer(): void {     if (this.initialized) return;     this.initialized = true;     this.loadAndRenderData();   }    private loadAndRenderData(): void {     const container = this.mapComponent.getContainer();     if (!container || !this.pathGenerator) {       console.error('Map container or projection not ready');       return;     }      d3.json(this.src).then((data: any) => {       const layerGroup = d3.select(container.nativeElement)         .append('g')         .attr('class', 'map-layer');        layerGroup.selectAll('path')         .data(data.features as Feature<Geometry, GeoJsonProperties>[])         .enter()         .append('path')         .attr('d', (d: Feature<Geometry, GeoJsonProperties>) => this.pathGenerator(d))         .attr('stroke', this.stroke)         .attr('fill', this.fill)         .attr('vector-effect', 'non-scaling-stroke')         .on('click', (event: Event, d: Feature<Geometry, GeoJsonProperties>) => {           this.click.emit(event as MouseEvent);         })         .on('mouseover', (event: Event, d: Feature<Geometry, GeoJsonProperties>) => {           this.hover.emit(event as MouseEvent);         });     }).catch((error: Error) => {       console.error('Error loading the GeoJSON data:', error);     });   } }
|   |   |   +-- ixt-map.component.html: 
|   |   |   +-- ixt-map.component.scss: 
|   |   |   +-- ixt-map.component.ts: // ixt-map.component.ts import { Component, Input, ViewChild, ElementRef, ContentChildren, QueryList, AfterContentInit } from '@angular/core'; import * as d3 from 'd3'; import { IxtLayerComponent } from './ixt-layer.component'; import { GeoProjection } from 'd3';  @Component({   selector: 'ixt-map',   template: `     <svg:svg #mapSvg          [attr.width]="width"           [attr.height]="height"          [style.transform]="getTransform()"          style="display: block; background: lightgray;">       <svg:g #mapContainer>         <ng-content></ng-content>       </svg:g>     </svg:svg>` }) export class IxtMapComponent implements AfterContentInit {   @Input() width: string = '800px';   @Input() height: string = '600px';   @Input() scale: string = '1';   @Input() translate: string = '0,0';    @ViewChild('mapContainer') mapContainer!: ElementRef;   @ContentChildren(IxtLayerComponent) layers!: QueryList<IxtLayerComponent>;    private projection!: GeoProjection;   private pathGenerator!: d3.GeoPath;    getTransform(): string {     return `scale(${this.scale}) translate(${this.translate})`;   }    ngAfterContentInit(): void {     // Create projection once for all layers     this.projection = d3.geoMercator()       .center([0, 20])       .scale(120)       .translate([400, 300]);      this.pathGenerator = d3.geoPath().projection(this.projection);      // Initialize all layers with the shared projection     setTimeout(() => {       this.layers.forEach(layer => {         layer.setProjection(this.pathGenerator);         layer.initializeLayer();       });     });   }    getContainer(): ElementRef {     return this.mapContainer;   }    getPathGenerator(): d3.GeoPath {     return this.pathGenerator;   } }  
|   |   |   +-- ixt-map.index.ts: // Export all public components from the ixt-map module export * from './ixt-map.component'; export * from './ixt-layer.component'; // Include any additional exports, such as services or interfaces, if they are part of the module 
|   |   |   -- ixt-map.module.ts: import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; // CommonModule is needed for common directives like NgIf, NgFor, etc. import { IxtMapComponent } from './ixt-map.component'; import { IxtLayerComponent } from './ixt-layer.component';  @NgModule({   declarations: [     IxtMapComponent,   // Declare IxtMapComponent     IxtLayerComponent  // Declare IxtLayerComponent   ],   imports: [     CommonModule       // Import CommonModule for basic Angular directives   ],   exports: [     IxtMapComponent,   // Export IxtMapComponent to be available for other modules     IxtLayerComponent  // Export IxtLayerComponent so it can be used in conjunction with IxtMapComponent   ] }) export class IxtMapModule {} 
